# coding: utf-8

"""
    PS RESTful Service API

    A proxy service for PromoStandards SOAP to a REST API  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DecorationColors(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_id': 'object',
        'location_id': 'object',
        'pms_match': 'object',
        'full_color': 'object',
        'color_array': 'object',
        'decoration_method_array': 'object'
    }

    attribute_map = {
        'product_id': 'productId',
        'location_id': 'locationId',
        'pms_match': 'pmsMatch',
        'full_color': 'fullColor',
        'color_array': 'ColorArray',
        'decoration_method_array': 'DecorationMethodArray'
    }

    def __init__(self, product_id=None, location_id=None, pms_match=None, full_color=None, color_array=None, decoration_method_array=None):  # noqa: E501
        """DecorationColors - a model defined in Swagger"""  # noqa: E501
        self._product_id = None
        self._location_id = None
        self._pms_match = None
        self._full_color = None
        self._color_array = None
        self._decoration_method_array = None
        self.discriminator = None
        self.product_id = product_id
        self.location_id = location_id
        self.pms_match = pms_match
        self.full_color = full_color
        self.color_array = color_array
        self.decoration_method_array = decoration_method_array

    @property
    def product_id(self):
        """Gets the product_id of this DecorationColors.  # noqa: E501


        :return: The product_id of this DecorationColors.  # noqa: E501
        :rtype: object
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this DecorationColors.


        :param product_id: The product_id of this DecorationColors.  # noqa: E501
        :type: object
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")  # noqa: E501

        self._product_id = product_id

    @property
    def location_id(self):
        """Gets the location_id of this DecorationColors.  # noqa: E501


        :return: The location_id of this DecorationColors.  # noqa: E501
        :rtype: object
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this DecorationColors.


        :param location_id: The location_id of this DecorationColors.  # noqa: E501
        :type: object
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")  # noqa: E501

        self._location_id = location_id

    @property
    def pms_match(self):
        """Gets the pms_match of this DecorationColors.  # noqa: E501


        :return: The pms_match of this DecorationColors.  # noqa: E501
        :rtype: object
        """
        return self._pms_match

    @pms_match.setter
    def pms_match(self, pms_match):
        """Sets the pms_match of this DecorationColors.


        :param pms_match: The pms_match of this DecorationColors.  # noqa: E501
        :type: object
        """
        if pms_match is None:
            raise ValueError("Invalid value for `pms_match`, must not be `None`")  # noqa: E501

        self._pms_match = pms_match

    @property
    def full_color(self):
        """Gets the full_color of this DecorationColors.  # noqa: E501

        Set to true if the decoration method is full color process; False implies that number of colors is irrelevant  # noqa: E501

        :return: The full_color of this DecorationColors.  # noqa: E501
        :rtype: object
        """
        return self._full_color

    @full_color.setter
    def full_color(self, full_color):
        """Sets the full_color of this DecorationColors.

        Set to true if the decoration method is full color process; False implies that number of colors is irrelevant  # noqa: E501

        :param full_color: The full_color of this DecorationColors.  # noqa: E501
        :type: object
        """
        if full_color is None:
            raise ValueError("Invalid value for `full_color`, must not be `None`")  # noqa: E501

        self._full_color = full_color

    @property
    def color_array(self):
        """Gets the color_array of this DecorationColors.  # noqa: E501


        :return: The color_array of this DecorationColors.  # noqa: E501
        :rtype: object
        """
        return self._color_array

    @color_array.setter
    def color_array(self, color_array):
        """Sets the color_array of this DecorationColors.


        :param color_array: The color_array of this DecorationColors.  # noqa: E501
        :type: object
        """
        if color_array is None:
            raise ValueError("Invalid value for `color_array`, must not be `None`")  # noqa: E501

        self._color_array = color_array

    @property
    def decoration_method_array(self):
        """Gets the decoration_method_array of this DecorationColors.  # noqa: E501


        :return: The decoration_method_array of this DecorationColors.  # noqa: E501
        :rtype: object
        """
        return self._decoration_method_array

    @decoration_method_array.setter
    def decoration_method_array(self, decoration_method_array):
        """Sets the decoration_method_array of this DecorationColors.


        :param decoration_method_array: The decoration_method_array of this DecorationColors.  # noqa: E501
        :type: object
        """
        if decoration_method_array is None:
            raise ValueError("Invalid value for `decoration_method_array`, must not be `None`")  # noqa: E501

        self._decoration_method_array = decoration_method_array

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DecorationColors, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DecorationColors):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
