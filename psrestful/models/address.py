# coding: utf-8

"""
    PS RESTful Service API

    A proxy service for PromoStandards SOAP to a REST API  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Address(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address1': 'object',
        'address2': 'object',
        'address3': 'object',
        'address4': 'object',
        'city': 'object',
        'region': 'object',
        'postal_code': 'object',
        'country': 'object'
    }

    attribute_map = {
        'address1': 'address1',
        'address2': 'address2',
        'address3': 'address3',
        'address4': 'address4',
        'city': 'city',
        'region': 'region',
        'postal_code': 'postalCode',
        'country': 'country'
    }

    def __init__(self, address1=None, address2=None, address3=None, address4=None, city=None, region=None, postal_code=None, country=None):  # noqa: E501
        """Address - a model defined in Swagger"""  # noqa: E501
        self._address1 = None
        self._address2 = None
        self._address3 = None
        self._address4 = None
        self._city = None
        self._region = None
        self._postal_code = None
        self._country = None
        self.discriminator = None
        self.address1 = address1
        self.address2 = address2
        self.address3 = address3
        self.address4 = address4
        self.city = city
        self.region = region
        self.postal_code = postal_code
        self.country = country

    @property
    def address1(self):
        """Gets the address1 of this Address.  # noqa: E501


        :return: The address1 of this Address.  # noqa: E501
        :rtype: object
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this Address.


        :param address1: The address1 of this Address.  # noqa: E501
        :type: object
        """
        if address1 is None:
            raise ValueError("Invalid value for `address1`, must not be `None`")  # noqa: E501

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this Address.  # noqa: E501


        :return: The address2 of this Address.  # noqa: E501
        :rtype: object
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this Address.


        :param address2: The address2 of this Address.  # noqa: E501
        :type: object
        """
        if address2 is None:
            raise ValueError("Invalid value for `address2`, must not be `None`")  # noqa: E501

        self._address2 = address2

    @property
    def address3(self):
        """Gets the address3 of this Address.  # noqa: E501


        :return: The address3 of this Address.  # noqa: E501
        :rtype: object
        """
        return self._address3

    @address3.setter
    def address3(self, address3):
        """Sets the address3 of this Address.


        :param address3: The address3 of this Address.  # noqa: E501
        :type: object
        """
        if address3 is None:
            raise ValueError("Invalid value for `address3`, must not be `None`")  # noqa: E501

        self._address3 = address3

    @property
    def address4(self):
        """Gets the address4 of this Address.  # noqa: E501


        :return: The address4 of this Address.  # noqa: E501
        :rtype: object
        """
        return self._address4

    @address4.setter
    def address4(self, address4):
        """Sets the address4 of this Address.


        :param address4: The address4 of this Address.  # noqa: E501
        :type: object
        """
        if address4 is None:
            raise ValueError("Invalid value for `address4`, must not be `None`")  # noqa: E501

        self._address4 = address4

    @property
    def city(self):
        """Gets the city of this Address.  # noqa: E501


        :return: The city of this Address.  # noqa: E501
        :rtype: object
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.


        :param city: The city of this Address.  # noqa: E501
        :type: object
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def region(self):
        """Gets the region of this Address.  # noqa: E501


        :return: The region of this Address.  # noqa: E501
        :rtype: object
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Address.


        :param region: The region of this Address.  # noqa: E501
        :type: object
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501

        self._region = region

    @property
    def postal_code(self):
        """Gets the postal_code of this Address.  # noqa: E501


        :return: The postal_code of this Address.  # noqa: E501
        :rtype: object
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Address.


        :param postal_code: The postal_code of this Address.  # noqa: E501
        :type: object
        """
        if postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")  # noqa: E501

        self._postal_code = postal_code

    @property
    def country(self):
        """Gets the country of this Address.  # noqa: E501


        :return: The country of this Address.  # noqa: E501
        :rtype: object
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address.


        :param country: The country of this Address.  # noqa: E501
        :type: object
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Address, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
