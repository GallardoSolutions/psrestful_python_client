# coding: utf-8

"""
    PS RESTful Service API

    A proxy service for PromoStandards SOAP to a REST API  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChargePrice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'x_min_qty': 'object',
        'x_uom': 'object',
        'y_min_qty': 'object',
        'y_uom': 'object',
        'price': 'object',
        'discount_code': 'object',
        'repeat_price': 'object',
        'repeat_discount_code': 'object',
        'price_effective_date': 'object',
        'price_expiry_date': 'object'
    }

    attribute_map = {
        'x_min_qty': 'xMinQty',
        'x_uom': 'xUom',
        'y_min_qty': 'yMinQty',
        'y_uom': 'yUom',
        'price': 'price',
        'discount_code': 'discountCode',
        'repeat_price': 'repeatPrice',
        'repeat_discount_code': 'repeatDiscountCode',
        'price_effective_date': 'priceEffectiveDate',
        'price_expiry_date': 'priceExpiryDate'
    }

    def __init__(self, x_min_qty=None, x_uom=None, y_min_qty=None, y_uom=None, price=None, discount_code=None, repeat_price=None, repeat_discount_code=None, price_effective_date=None, price_expiry_date=None):  # noqa: E501
        """ChargePrice - a model defined in Swagger"""  # noqa: E501
        self._x_min_qty = None
        self._x_uom = None
        self._y_min_qty = None
        self._y_uom = None
        self._price = None
        self._discount_code = None
        self._repeat_price = None
        self._repeat_discount_code = None
        self._price_effective_date = None
        self._price_expiry_date = None
        self.discriminator = None
        self.x_min_qty = x_min_qty
        self.x_uom = x_uom
        self.y_min_qty = y_min_qty
        self.y_uom = y_uom
        self.price = price
        self.discount_code = discount_code
        self.repeat_price = repeat_price
        self.repeat_discount_code = repeat_discount_code
        self.price_effective_date = price_effective_date
        self.price_expiry_date = price_expiry_date

    @property
    def x_min_qty(self):
        """Gets the x_min_qty of this ChargePrice.  # noqa: E501


        :return: The x_min_qty of this ChargePrice.  # noqa: E501
        :rtype: object
        """
        return self._x_min_qty

    @x_min_qty.setter
    def x_min_qty(self, x_min_qty):
        """Sets the x_min_qty of this ChargePrice.


        :param x_min_qty: The x_min_qty of this ChargePrice.  # noqa: E501
        :type: object
        """
        if x_min_qty is None:
            raise ValueError("Invalid value for `x_min_qty`, must not be `None`")  # noqa: E501

        self._x_min_qty = x_min_qty

    @property
    def x_uom(self):
        """Gets the x_uom of this ChargePrice.  # noqa: E501


        :return: The x_uom of this ChargePrice.  # noqa: E501
        :rtype: object
        """
        return self._x_uom

    @x_uom.setter
    def x_uom(self, x_uom):
        """Sets the x_uom of this ChargePrice.


        :param x_uom: The x_uom of this ChargePrice.  # noqa: E501
        :type: object
        """
        if x_uom is None:
            raise ValueError("Invalid value for `x_uom`, must not be `None`")  # noqa: E501

        self._x_uom = x_uom

    @property
    def y_min_qty(self):
        """Gets the y_min_qty of this ChargePrice.  # noqa: E501


        :return: The y_min_qty of this ChargePrice.  # noqa: E501
        :rtype: object
        """
        return self._y_min_qty

    @y_min_qty.setter
    def y_min_qty(self, y_min_qty):
        """Sets the y_min_qty of this ChargePrice.


        :param y_min_qty: The y_min_qty of this ChargePrice.  # noqa: E501
        :type: object
        """
        if y_min_qty is None:
            raise ValueError("Invalid value for `y_min_qty`, must not be `None`")  # noqa: E501

        self._y_min_qty = y_min_qty

    @property
    def y_uom(self):
        """Gets the y_uom of this ChargePrice.  # noqa: E501


        :return: The y_uom of this ChargePrice.  # noqa: E501
        :rtype: object
        """
        return self._y_uom

    @y_uom.setter
    def y_uom(self, y_uom):
        """Sets the y_uom of this ChargePrice.


        :param y_uom: The y_uom of this ChargePrice.  # noqa: E501
        :type: object
        """
        if y_uom is None:
            raise ValueError("Invalid value for `y_uom`, must not be `None`")  # noqa: E501

        self._y_uom = y_uom

    @property
    def price(self):
        """Gets the price of this ChargePrice.  # noqa: E501


        :return: The price of this ChargePrice.  # noqa: E501
        :rtype: object
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ChargePrice.


        :param price: The price of this ChargePrice.  # noqa: E501
        :type: object
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def discount_code(self):
        """Gets the discount_code of this ChargePrice.  # noqa: E501

        The industry discount code associated with the price  # noqa: E501

        :return: The discount_code of this ChargePrice.  # noqa: E501
        :rtype: object
        """
        return self._discount_code

    @discount_code.setter
    def discount_code(self, discount_code):
        """Sets the discount_code of this ChargePrice.

        The industry discount code associated with the price  # noqa: E501

        :param discount_code: The discount_code of this ChargePrice.  # noqa: E501
        :type: object
        """
        if discount_code is None:
            raise ValueError("Invalid value for `discount_code`, must not be `None`")  # noqa: E501

        self._discount_code = discount_code

    @property
    def repeat_price(self):
        """Gets the repeat_price of this ChargePrice.  # noqa: E501


        :return: The repeat_price of this ChargePrice.  # noqa: E501
        :rtype: object
        """
        return self._repeat_price

    @repeat_price.setter
    def repeat_price(self, repeat_price):
        """Sets the repeat_price of this ChargePrice.


        :param repeat_price: The repeat_price of this ChargePrice.  # noqa: E501
        :type: object
        """
        if repeat_price is None:
            raise ValueError("Invalid value for `repeat_price`, must not be `None`")  # noqa: E501

        self._repeat_price = repeat_price

    @property
    def repeat_discount_code(self):
        """Gets the repeat_discount_code of this ChargePrice.  # noqa: E501


        :return: The repeat_discount_code of this ChargePrice.  # noqa: E501
        :rtype: object
        """
        return self._repeat_discount_code

    @repeat_discount_code.setter
    def repeat_discount_code(self, repeat_discount_code):
        """Sets the repeat_discount_code of this ChargePrice.


        :param repeat_discount_code: The repeat_discount_code of this ChargePrice.  # noqa: E501
        :type: object
        """
        if repeat_discount_code is None:
            raise ValueError("Invalid value for `repeat_discount_code`, must not be `None`")  # noqa: E501

        self._repeat_discount_code = repeat_discount_code

    @property
    def price_effective_date(self):
        """Gets the price_effective_date of this ChargePrice.  # noqa: E501


        :return: The price_effective_date of this ChargePrice.  # noqa: E501
        :rtype: object
        """
        return self._price_effective_date

    @price_effective_date.setter
    def price_effective_date(self, price_effective_date):
        """Sets the price_effective_date of this ChargePrice.


        :param price_effective_date: The price_effective_date of this ChargePrice.  # noqa: E501
        :type: object
        """
        if price_effective_date is None:
            raise ValueError("Invalid value for `price_effective_date`, must not be `None`")  # noqa: E501

        self._price_effective_date = price_effective_date

    @property
    def price_expiry_date(self):
        """Gets the price_expiry_date of this ChargePrice.  # noqa: E501


        :return: The price_expiry_date of this ChargePrice.  # noqa: E501
        :rtype: object
        """
        return self._price_expiry_date

    @price_expiry_date.setter
    def price_expiry_date(self, price_expiry_date):
        """Sets the price_expiry_date of this ChargePrice.


        :param price_expiry_date: The price_expiry_date of this ChargePrice.  # noqa: E501
        :type: object
        """
        if price_expiry_date is None:
            raise ValueError("Invalid value for `price_expiry_date`, must not be `None`")  # noqa: E501

        self._price_expiry_date = price_expiry_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChargePrice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChargePrice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
