# coding: utf-8

"""
    PS RESTful Service API

    A proxy service for PromoStandards SOAP to a REST API  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Shipment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ship_to': 'ShipTo',
        'packing_list_required': 'object',
        'blind_ship': 'object',
        'allow_consolidation': 'object',
        'freight_details': 'FreightDetails',
        'third_party_account': 'object',
        'ship_references': 'object',
        'comments': 'object'
    }

    attribute_map = {
        'ship_to': 'ShipTo',
        'packing_list_required': 'packingListRequired',
        'blind_ship': 'blindShip',
        'allow_consolidation': 'allowConsolidation',
        'freight_details': 'FreightDetails',
        'third_party_account': 'ThirdPartyAccount',
        'ship_references': 'shipReferences',
        'comments': 'comments'
    }

    def __init__(self, ship_to=None, packing_list_required=None, blind_ship=None, allow_consolidation=None, freight_details=None, third_party_account=None, ship_references=None, comments=None):  # noqa: E501
        """Shipment - a model defined in Swagger"""  # noqa: E501
        self._ship_to = None
        self._packing_list_required = None
        self._blind_ship = None
        self._allow_consolidation = None
        self._freight_details = None
        self._third_party_account = None
        self._ship_references = None
        self._comments = None
        self.discriminator = None
        self.ship_to = ship_to
        self.packing_list_required = packing_list_required
        self.blind_ship = blind_ship
        self.allow_consolidation = allow_consolidation
        self.freight_details = freight_details
        self.third_party_account = third_party_account
        if ship_references is not None:
            self.ship_references = ship_references
        if comments is not None:
            self.comments = comments

    @property
    def ship_to(self):
        """Gets the ship_to of this Shipment.  # noqa: E501


        :return: The ship_to of this Shipment.  # noqa: E501
        :rtype: ShipTo
        """
        return self._ship_to

    @ship_to.setter
    def ship_to(self, ship_to):
        """Sets the ship_to of this Shipment.


        :param ship_to: The ship_to of this Shipment.  # noqa: E501
        :type: ShipTo
        """
        if ship_to is None:
            raise ValueError("Invalid value for `ship_to`, must not be `None`")  # noqa: E501

        self._ship_to = ship_to

    @property
    def packing_list_required(self):
        """Gets the packing_list_required of this Shipment.  # noqa: E501


        :return: The packing_list_required of this Shipment.  # noqa: E501
        :rtype: object
        """
        return self._packing_list_required

    @packing_list_required.setter
    def packing_list_required(self, packing_list_required):
        """Sets the packing_list_required of this Shipment.


        :param packing_list_required: The packing_list_required of this Shipment.  # noqa: E501
        :type: object
        """
        if packing_list_required is None:
            raise ValueError("Invalid value for `packing_list_required`, must not be `None`")  # noqa: E501

        self._packing_list_required = packing_list_required

    @property
    def blind_ship(self):
        """Gets the blind_ship of this Shipment.  # noqa: E501


        :return: The blind_ship of this Shipment.  # noqa: E501
        :rtype: object
        """
        return self._blind_ship

    @blind_ship.setter
    def blind_ship(self, blind_ship):
        """Sets the blind_ship of this Shipment.


        :param blind_ship: The blind_ship of this Shipment.  # noqa: E501
        :type: object
        """
        if blind_ship is None:
            raise ValueError("Invalid value for `blind_ship`, must not be `None`")  # noqa: E501

        self._blind_ship = blind_ship

    @property
    def allow_consolidation(self):
        """Gets the allow_consolidation of this Shipment.  # noqa: E501


        :return: The allow_consolidation of this Shipment.  # noqa: E501
        :rtype: object
        """
        return self._allow_consolidation

    @allow_consolidation.setter
    def allow_consolidation(self, allow_consolidation):
        """Sets the allow_consolidation of this Shipment.


        :param allow_consolidation: The allow_consolidation of this Shipment.  # noqa: E501
        :type: object
        """
        if allow_consolidation is None:
            raise ValueError("Invalid value for `allow_consolidation`, must not be `None`")  # noqa: E501

        self._allow_consolidation = allow_consolidation

    @property
    def freight_details(self):
        """Gets the freight_details of this Shipment.  # noqa: E501


        :return: The freight_details of this Shipment.  # noqa: E501
        :rtype: FreightDetails
        """
        return self._freight_details

    @freight_details.setter
    def freight_details(self, freight_details):
        """Sets the freight_details of this Shipment.


        :param freight_details: The freight_details of this Shipment.  # noqa: E501
        :type: FreightDetails
        """
        if freight_details is None:
            raise ValueError("Invalid value for `freight_details`, must not be `None`")  # noqa: E501

        self._freight_details = freight_details

    @property
    def third_party_account(self):
        """Gets the third_party_account of this Shipment.  # noqa: E501


        :return: The third_party_account of this Shipment.  # noqa: E501
        :rtype: object
        """
        return self._third_party_account

    @third_party_account.setter
    def third_party_account(self, third_party_account):
        """Sets the third_party_account of this Shipment.


        :param third_party_account: The third_party_account of this Shipment.  # noqa: E501
        :type: object
        """
        if third_party_account is None:
            raise ValueError("Invalid value for `third_party_account`, must not be `None`")  # noqa: E501

        self._third_party_account = third_party_account

    @property
    def ship_references(self):
        """Gets the ship_references of this Shipment.  # noqa: E501

        Array of `two` strings max of identifiers used as the reference fields used during the shipping process. A shipReference can be a `purchase order number`, `customer number`, `company name`, `Bill of Lading number`, or a phrase that identifies that shipment  # noqa: E501

        :return: The ship_references of this Shipment.  # noqa: E501
        :rtype: object
        """
        return self._ship_references

    @ship_references.setter
    def ship_references(self, ship_references):
        """Sets the ship_references of this Shipment.

        Array of `two` strings max of identifiers used as the reference fields used during the shipping process. A shipReference can be a `purchase order number`, `customer number`, `company name`, `Bill of Lading number`, or a phrase that identifies that shipment  # noqa: E501

        :param ship_references: The ship_references of this Shipment.  # noqa: E501
        :type: object
        """

        self._ship_references = ship_references

    @property
    def comments(self):
        """Gets the comments of this Shipment.  # noqa: E501


        :return: The comments of this Shipment.  # noqa: E501
        :rtype: object
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Shipment.


        :param comments: The comments of this Shipment.  # noqa: E501
        :type: object
        """

        self._comments = comments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Shipment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Shipment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
