# coding: utf-8

"""
    PS RESTful Service API

    A proxy service for PromoStandards SOAP to a REST API  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'environment': 'object',
        'order_type': 'OrderType',
        'order_number': 'object',
        'order_date': 'object',
        'last_modified': 'object',
        'total_amount': 'object',
        'payment_terms': 'object',
        'rush': 'object',
        'currency': 'object',
        'digital_proof': 'object',
        'order_contact_array': 'object',
        'shipment_array': 'ShipmentArray',
        'line_item_array': 'LineItemArray',
        'terms_and_conditions': 'object',
        'sales_channel': 'object',
        'promo_code': 'object',
        'tax_information_array': 'object'
    }

    attribute_map = {
        'environment': 'environment',
        'order_type': 'orderType',
        'order_number': 'orderNumber',
        'order_date': 'orderDate',
        'last_modified': 'lastModified',
        'total_amount': 'totalAmount',
        'payment_terms': 'paymentTerms',
        'rush': 'rush',
        'currency': 'currency',
        'digital_proof': 'DigitalProof',
        'order_contact_array': 'OrderContactArray',
        'shipment_array': 'ShipmentArray',
        'line_item_array': 'LineItemArray',
        'terms_and_conditions': 'termsAndConditions',
        'sales_channel': 'salesChannel',
        'promo_code': 'promoCode',
        'tax_information_array': 'TaxInformationArray'
    }

    def __init__(self, environment=None, order_type=None, order_number=None, order_date=None, last_modified=None, total_amount=None, payment_terms=None, rush=None, currency=None, digital_proof=None, order_contact_array=None, shipment_array=None, line_item_array=None, terms_and_conditions=None, sales_channel=None, promo_code=None, tax_information_array=None):  # noqa: E501
        """PO - a model defined in Swagger"""  # noqa: E501
        self._environment = None
        self._order_type = None
        self._order_number = None
        self._order_date = None
        self._last_modified = None
        self._total_amount = None
        self._payment_terms = None
        self._rush = None
        self._currency = None
        self._digital_proof = None
        self._order_contact_array = None
        self._shipment_array = None
        self._line_item_array = None
        self._terms_and_conditions = None
        self._sales_channel = None
        self._promo_code = None
        self._tax_information_array = None
        self.discriminator = None
        if environment is not None:
            self.environment = environment
        self.order_type = order_type
        self.order_number = order_number
        self.order_date = order_date
        self.last_modified = last_modified
        self.total_amount = total_amount
        self.payment_terms = payment_terms
        if rush is not None:
            self.rush = rush
        self.currency = currency
        self.digital_proof = digital_proof
        self.order_contact_array = order_contact_array
        self.shipment_array = shipment_array
        self.line_item_array = line_item_array
        self.terms_and_conditions = terms_and_conditions
        self.sales_channel = sales_channel
        if promo_code is not None:
            self.promo_code = promo_code
        self.tax_information_array = tax_information_array

    @property
    def environment(self):
        """Gets the environment of this PO.  # noqa: E501

        The environment the purchase order is being sent from. Should be STAGING or PROD  # noqa: E501

        :return: The environment of this PO.  # noqa: E501
        :rtype: object
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this PO.

        The environment the purchase order is being sent from. Should be STAGING or PROD  # noqa: E501

        :param environment: The environment of this PO.  # noqa: E501
        :type: object
        """

        self._environment = environment

    @property
    def order_type(self):
        """Gets the order_type of this PO.  # noqa: E501


        :return: The order_type of this PO.  # noqa: E501
        :rtype: OrderType
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this PO.


        :param order_type: The order_type of this PO.  # noqa: E501
        :type: OrderType
        """
        if order_type is None:
            raise ValueError("Invalid value for `order_type`, must not be `None`")  # noqa: E501

        self._order_type = order_type

    @property
    def order_number(self):
        """Gets the order_number of this PO.  # noqa: E501


        :return: The order_number of this PO.  # noqa: E501
        :rtype: object
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this PO.


        :param order_number: The order_number of this PO.  # noqa: E501
        :type: object
        """
        if order_number is None:
            raise ValueError("Invalid value for `order_number`, must not be `None`")  # noqa: E501

        self._order_number = order_number

    @property
    def order_date(self):
        """Gets the order_date of this PO.  # noqa: E501


        :return: The order_date of this PO.  # noqa: E501
        :rtype: object
        """
        return self._order_date

    @order_date.setter
    def order_date(self, order_date):
        """Sets the order_date of this PO.


        :param order_date: The order_date of this PO.  # noqa: E501
        :type: object
        """
        if order_date is None:
            raise ValueError("Invalid value for `order_date`, must not be `None`")  # noqa: E501

        self._order_date = order_date

    @property
    def last_modified(self):
        """Gets the last_modified of this PO.  # noqa: E501


        :return: The last_modified of this PO.  # noqa: E501
        :rtype: object
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this PO.


        :param last_modified: The last_modified of this PO.  # noqa: E501
        :type: object
        """
        if last_modified is None:
            raise ValueError("Invalid value for `last_modified`, must not be `None`")  # noqa: E501

        self._last_modified = last_modified

    @property
    def total_amount(self):
        """Gets the total_amount of this PO.  # noqa: E501

        The total amount of the purchase order  # noqa: E501

        :return: The total_amount of this PO.  # noqa: E501
        :rtype: object
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this PO.

        The total amount of the purchase order  # noqa: E501

        :param total_amount: The total_amount of this PO.  # noqa: E501
        :type: object
        """
        if total_amount is None:
            raise ValueError("Invalid value for `total_amount`, must not be `None`")  # noqa: E501

        self._total_amount = total_amount

    @property
    def payment_terms(self):
        """Gets the payment_terms of this PO.  # noqa: E501

        ie. NET15, NET30, etc.  # noqa: E501

        :return: The payment_terms of this PO.  # noqa: E501
        :rtype: object
        """
        return self._payment_terms

    @payment_terms.setter
    def payment_terms(self, payment_terms):
        """Sets the payment_terms of this PO.

        ie. NET15, NET30, etc.  # noqa: E501

        :param payment_terms: The payment_terms of this PO.  # noqa: E501
        :type: object
        """
        if payment_terms is None:
            raise ValueError("Invalid value for `payment_terms`, must not be `None`")  # noqa: E501

        self._payment_terms = payment_terms

    @property
    def rush(self):
        """Gets the rush of this PO.  # noqa: E501

        Used to indicate a rush on the purchase order  # noqa: E501

        :return: The rush of this PO.  # noqa: E501
        :rtype: object
        """
        return self._rush

    @rush.setter
    def rush(self, rush):
        """Sets the rush of this PO.

        Used to indicate a rush on the purchase order  # noqa: E501

        :param rush: The rush of this PO.  # noqa: E501
        :type: object
        """

        self._rush = rush

    @property
    def currency(self):
        """Gets the currency of this PO.  # noqa: E501

        The currency the purchase order is transacted in ISO4217 format. ie. USD, CAD, EUR, JPY, GBP, etc.  # noqa: E501

        :return: The currency of this PO.  # noqa: E501
        :rtype: object
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PO.

        The currency the purchase order is transacted in ISO4217 format. ie. USD, CAD, EUR, JPY, GBP, etc.  # noqa: E501

        :param currency: The currency of this PO.  # noqa: E501
        :type: object
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def digital_proof(self):
        """Gets the digital_proof of this PO.  # noqa: E501


        :return: The digital_proof of this PO.  # noqa: E501
        :rtype: object
        """
        return self._digital_proof

    @digital_proof.setter
    def digital_proof(self, digital_proof):
        """Sets the digital_proof of this PO.


        :param digital_proof: The digital_proof of this PO.  # noqa: E501
        :type: object
        """
        if digital_proof is None:
            raise ValueError("Invalid value for `digital_proof`, must not be `None`")  # noqa: E501

        self._digital_proof = digital_proof

    @property
    def order_contact_array(self):
        """Gets the order_contact_array of this PO.  # noqa: E501


        :return: The order_contact_array of this PO.  # noqa: E501
        :rtype: object
        """
        return self._order_contact_array

    @order_contact_array.setter
    def order_contact_array(self, order_contact_array):
        """Sets the order_contact_array of this PO.


        :param order_contact_array: The order_contact_array of this PO.  # noqa: E501
        :type: object
        """
        if order_contact_array is None:
            raise ValueError("Invalid value for `order_contact_array`, must not be `None`")  # noqa: E501

        self._order_contact_array = order_contact_array

    @property
    def shipment_array(self):
        """Gets the shipment_array of this PO.  # noqa: E501


        :return: The shipment_array of this PO.  # noqa: E501
        :rtype: ShipmentArray
        """
        return self._shipment_array

    @shipment_array.setter
    def shipment_array(self, shipment_array):
        """Sets the shipment_array of this PO.


        :param shipment_array: The shipment_array of this PO.  # noqa: E501
        :type: ShipmentArray
        """
        if shipment_array is None:
            raise ValueError("Invalid value for `shipment_array`, must not be `None`")  # noqa: E501

        self._shipment_array = shipment_array

    @property
    def line_item_array(self):
        """Gets the line_item_array of this PO.  # noqa: E501


        :return: The line_item_array of this PO.  # noqa: E501
        :rtype: LineItemArray
        """
        return self._line_item_array

    @line_item_array.setter
    def line_item_array(self, line_item_array):
        """Sets the line_item_array of this PO.


        :param line_item_array: The line_item_array of this PO.  # noqa: E501
        :type: LineItemArray
        """
        if line_item_array is None:
            raise ValueError("Invalid value for `line_item_array`, must not be `None`")  # noqa: E501

        self._line_item_array = line_item_array

    @property
    def terms_and_conditions(self):
        """Gets the terms_and_conditions of this PO.  # noqa: E501

        The terms and conditions of the purchase order  # noqa: E501

        :return: The terms_and_conditions of this PO.  # noqa: E501
        :rtype: object
        """
        return self._terms_and_conditions

    @terms_and_conditions.setter
    def terms_and_conditions(self, terms_and_conditions):
        """Sets the terms_and_conditions of this PO.

        The terms and conditions of the purchase order  # noqa: E501

        :param terms_and_conditions: The terms_and_conditions of this PO.  # noqa: E501
        :type: object
        """
        if terms_and_conditions is None:
            raise ValueError("Invalid value for `terms_and_conditions`, must not be `None`")  # noqa: E501

        self._terms_and_conditions = terms_and_conditions

    @property
    def sales_channel(self):
        """Gets the sales_channel of this PO.  # noqa: E501

        The sales channel the purchase order  # noqa: E501

        :return: The sales_channel of this PO.  # noqa: E501
        :rtype: object
        """
        return self._sales_channel

    @sales_channel.setter
    def sales_channel(self, sales_channel):
        """Sets the sales_channel of this PO.

        The sales channel the purchase order  # noqa: E501

        :param sales_channel: The sales_channel of this PO.  # noqa: E501
        :type: object
        """
        if sales_channel is None:
            raise ValueError("Invalid value for `sales_channel`, must not be `None`")  # noqa: E501

        self._sales_channel = sales_channel

    @property
    def promo_code(self):
        """Gets the promo_code of this PO.  # noqa: E501


        :return: The promo_code of this PO.  # noqa: E501
        :rtype: object
        """
        return self._promo_code

    @promo_code.setter
    def promo_code(self, promo_code):
        """Sets the promo_code of this PO.


        :param promo_code: The promo_code of this PO.  # noqa: E501
        :type: object
        """

        self._promo_code = promo_code

    @property
    def tax_information_array(self):
        """Gets the tax_information_array of this PO.  # noqa: E501


        :return: The tax_information_array of this PO.  # noqa: E501
        :rtype: object
        """
        return self._tax_information_array

    @tax_information_array.setter
    def tax_information_array(self, tax_information_array):
        """Sets the tax_information_array of this PO.


        :param tax_information_array: The tax_information_array of this PO.  # noqa: E501
        :type: object
        """
        if tax_information_array is None:
            raise ValueError("Invalid value for `tax_information_array`, must not be `None`")  # noqa: E501

        self._tax_information_array = tax_information_array

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
