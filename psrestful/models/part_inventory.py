# coding: utf-8

"""
    PS RESTful Service API

    A proxy service for PromoStandards SOAP to a REST API  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PartInventory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'part_id': 'object',
        'main_part': 'object',
        'part_color': 'object',
        'label_size': 'object',
        'part_description': 'object',
        'quantity_available': 'object',
        'manufactured_item': 'object',
        'buy_to_order': 'object',
        'replenishment_lead_time': 'object',
        'attribute_selection': 'object',
        'last_modified': 'object',
        'inventory_location_array': 'object'
    }

    attribute_map = {
        'part_id': 'partId',
        'main_part': 'mainPart',
        'part_color': 'partColor',
        'label_size': 'labelSize',
        'part_description': 'partDescription',
        'quantity_available': 'quantityAvailable',
        'manufactured_item': 'manufacturedItem',
        'buy_to_order': 'buyToOrder',
        'replenishment_lead_time': 'replenishmentLeadTime',
        'attribute_selection': 'attributeSelection',
        'last_modified': 'lastModified',
        'inventory_location_array': 'InventoryLocationArray'
    }

    def __init__(self, part_id=None, main_part=None, part_color=None, label_size=None, part_description=None, quantity_available=None, manufactured_item=None, buy_to_order=None, replenishment_lead_time=None, attribute_selection=None, last_modified=None, inventory_location_array=None):  # noqa: E501
        """PartInventory - a model defined in Swagger"""  # noqa: E501
        self._part_id = None
        self._main_part = None
        self._part_color = None
        self._label_size = None
        self._part_description = None
        self._quantity_available = None
        self._manufactured_item = None
        self._buy_to_order = None
        self._replenishment_lead_time = None
        self._attribute_selection = None
        self._last_modified = None
        self._inventory_location_array = None
        self.discriminator = None
        self.part_id = part_id
        self.main_part = main_part
        if part_color is not None:
            self.part_color = part_color
        if label_size is not None:
            self.label_size = label_size
        if part_description is not None:
            self.part_description = part_description
        self.quantity_available = quantity_available
        self.manufactured_item = manufactured_item
        self.buy_to_order = buy_to_order
        if replenishment_lead_time is not None:
            self.replenishment_lead_time = replenishment_lead_time
        self.attribute_selection = attribute_selection
        if last_modified is not None:
            self.last_modified = last_modified
        self.inventory_location_array = inventory_location_array

    @property
    def part_id(self):
        """Gets the part_id of this PartInventory.  # noqa: E501


        :return: The part_id of this PartInventory.  # noqa: E501
        :rtype: object
        """
        return self._part_id

    @part_id.setter
    def part_id(self, part_id):
        """Sets the part_id of this PartInventory.


        :param part_id: The part_id of this PartInventory.  # noqa: E501
        :type: object
        """
        if part_id is None:
            raise ValueError("Invalid value for `part_id`, must not be `None`")  # noqa: E501

        self._part_id = part_id

    @property
    def main_part(self):
        """Gets the main_part of this PartInventory.  # noqa: E501


        :return: The main_part of this PartInventory.  # noqa: E501
        :rtype: object
        """
        return self._main_part

    @main_part.setter
    def main_part(self, main_part):
        """Sets the main_part of this PartInventory.


        :param main_part: The main_part of this PartInventory.  # noqa: E501
        :type: object
        """
        if main_part is None:
            raise ValueError("Invalid value for `main_part`, must not be `None`")  # noqa: E501

        self._main_part = main_part

    @property
    def part_color(self):
        """Gets the part_color of this PartInventory.  # noqa: E501


        :return: The part_color of this PartInventory.  # noqa: E501
        :rtype: object
        """
        return self._part_color

    @part_color.setter
    def part_color(self, part_color):
        """Sets the part_color of this PartInventory.


        :param part_color: The part_color of this PartInventory.  # noqa: E501
        :type: object
        """

        self._part_color = part_color

    @property
    def label_size(self):
        """Gets the label_size of this PartInventory.  # noqa: E501


        :return: The label_size of this PartInventory.  # noqa: E501
        :rtype: object
        """
        return self._label_size

    @label_size.setter
    def label_size(self, label_size):
        """Sets the label_size of this PartInventory.


        :param label_size: The label_size of this PartInventory.  # noqa: E501
        :type: object
        """

        self._label_size = label_size

    @property
    def part_description(self):
        """Gets the part_description of this PartInventory.  # noqa: E501


        :return: The part_description of this PartInventory.  # noqa: E501
        :rtype: object
        """
        return self._part_description

    @part_description.setter
    def part_description(self, part_description):
        """Sets the part_description of this PartInventory.


        :param part_description: The part_description of this PartInventory.  # noqa: E501
        :type: object
        """

        self._part_description = part_description

    @property
    def quantity_available(self):
        """Gets the quantity_available of this PartInventory.  # noqa: E501


        :return: The quantity_available of this PartInventory.  # noqa: E501
        :rtype: object
        """
        return self._quantity_available

    @quantity_available.setter
    def quantity_available(self, quantity_available):
        """Sets the quantity_available of this PartInventory.


        :param quantity_available: The quantity_available of this PartInventory.  # noqa: E501
        :type: object
        """
        if quantity_available is None:
            raise ValueError("Invalid value for `quantity_available`, must not be `None`")  # noqa: E501

        self._quantity_available = quantity_available

    @property
    def manufactured_item(self):
        """Gets the manufactured_item of this PartInventory.  # noqa: E501


        :return: The manufactured_item of this PartInventory.  # noqa: E501
        :rtype: object
        """
        return self._manufactured_item

    @manufactured_item.setter
    def manufactured_item(self, manufactured_item):
        """Sets the manufactured_item of this PartInventory.


        :param manufactured_item: The manufactured_item of this PartInventory.  # noqa: E501
        :type: object
        """
        if manufactured_item is None:
            raise ValueError("Invalid value for `manufactured_item`, must not be `None`")  # noqa: E501

        self._manufactured_item = manufactured_item

    @property
    def buy_to_order(self):
        """Gets the buy_to_order of this PartInventory.  # noqa: E501


        :return: The buy_to_order of this PartInventory.  # noqa: E501
        :rtype: object
        """
        return self._buy_to_order

    @buy_to_order.setter
    def buy_to_order(self, buy_to_order):
        """Sets the buy_to_order of this PartInventory.


        :param buy_to_order: The buy_to_order of this PartInventory.  # noqa: E501
        :type: object
        """
        if buy_to_order is None:
            raise ValueError("Invalid value for `buy_to_order`, must not be `None`")  # noqa: E501

        self._buy_to_order = buy_to_order

    @property
    def replenishment_lead_time(self):
        """Gets the replenishment_lead_time of this PartInventory.  # noqa: E501


        :return: The replenishment_lead_time of this PartInventory.  # noqa: E501
        :rtype: object
        """
        return self._replenishment_lead_time

    @replenishment_lead_time.setter
    def replenishment_lead_time(self, replenishment_lead_time):
        """Sets the replenishment_lead_time of this PartInventory.


        :param replenishment_lead_time: The replenishment_lead_time of this PartInventory.  # noqa: E501
        :type: object
        """

        self._replenishment_lead_time = replenishment_lead_time

    @property
    def attribute_selection(self):
        """Gets the attribute_selection of this PartInventory.  # noqa: E501


        :return: The attribute_selection of this PartInventory.  # noqa: E501
        :rtype: object
        """
        return self._attribute_selection

    @attribute_selection.setter
    def attribute_selection(self, attribute_selection):
        """Sets the attribute_selection of this PartInventory.


        :param attribute_selection: The attribute_selection of this PartInventory.  # noqa: E501
        :type: object
        """
        if attribute_selection is None:
            raise ValueError("Invalid value for `attribute_selection`, must not be `None`")  # noqa: E501

        self._attribute_selection = attribute_selection

    @property
    def last_modified(self):
        """Gets the last_modified of this PartInventory.  # noqa: E501


        :return: The last_modified of this PartInventory.  # noqa: E501
        :rtype: object
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this PartInventory.


        :param last_modified: The last_modified of this PartInventory.  # noqa: E501
        :type: object
        """

        self._last_modified = last_modified

    @property
    def inventory_location_array(self):
        """Gets the inventory_location_array of this PartInventory.  # noqa: E501


        :return: The inventory_location_array of this PartInventory.  # noqa: E501
        :rtype: object
        """
        return self._inventory_location_array

    @inventory_location_array.setter
    def inventory_location_array(self, inventory_location_array):
        """Sets the inventory_location_array of this PartInventory.


        :param inventory_location_array: The inventory_location_array of this PartInventory.  # noqa: E501
        :type: object
        """
        if inventory_location_array is None:
            raise ValueError("Invalid value for `inventory_location_array`, must not be `None`")  # noqa: E501

        self._inventory_location_array = inventory_location_array

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PartInventory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartInventory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
