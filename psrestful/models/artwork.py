# coding: utf-8

"""
    PS RESTful Service API

    A proxy service for PromoStandards SOAP to a REST API  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Artwork(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ref_artwork_id': 'object',
        'description': 'object',
        'dimensions': 'object',
        'artwork_file_array': 'object',
        'instructions': 'object',
        'layers': 'object',
        'typeset_array': 'object',
        'total_stitch_count': 'object'
    }

    attribute_map = {
        'ref_artwork_id': 'refArtworkId',
        'description': 'description',
        'dimensions': 'Dimensions',
        'artwork_file_array': 'ArtworkFileArray',
        'instructions': 'instructions',
        'layers': 'Layers',
        'typeset_array': 'TypesetArray',
        'total_stitch_count': 'totalStitchCount'
    }

    def __init__(self, ref_artwork_id=None, description=None, dimensions=None, artwork_file_array=None, instructions=None, layers=None, typeset_array=None, total_stitch_count=None):  # noqa: E501
        """Artwork - a model defined in Swagger"""  # noqa: E501
        self._ref_artwork_id = None
        self._description = None
        self._dimensions = None
        self._artwork_file_array = None
        self._instructions = None
        self._layers = None
        self._typeset_array = None
        self._total_stitch_count = None
        self.discriminator = None
        self.ref_artwork_id = ref_artwork_id
        self.description = description
        self.dimensions = dimensions
        self.artwork_file_array = artwork_file_array
        self.instructions = instructions
        self.layers = layers
        self.typeset_array = typeset_array
        self.total_stitch_count = total_stitch_count

    @property
    def ref_artwork_id(self):
        """Gets the ref_artwork_id of this Artwork.  # noqa: E501

        A pre-shared artwork Id that can be used by the supplier to find and reference the artwork  # noqa: E501

        :return: The ref_artwork_id of this Artwork.  # noqa: E501
        :rtype: object
        """
        return self._ref_artwork_id

    @ref_artwork_id.setter
    def ref_artwork_id(self, ref_artwork_id):
        """Sets the ref_artwork_id of this Artwork.

        A pre-shared artwork Id that can be used by the supplier to find and reference the artwork  # noqa: E501

        :param ref_artwork_id: The ref_artwork_id of this Artwork.  # noqa: E501
        :type: object
        """
        if ref_artwork_id is None:
            raise ValueError("Invalid value for `ref_artwork_id`, must not be `None`")  # noqa: E501

        self._ref_artwork_id = ref_artwork_id

    @property
    def description(self):
        """Gets the description of this Artwork.  # noqa: E501

        A textual description of the artwork being provided  # noqa: E501

        :return: The description of this Artwork.  # noqa: E501
        :rtype: object
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Artwork.

        A textual description of the artwork being provided  # noqa: E501

        :param description: The description of this Artwork.  # noqa: E501
        :type: object
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def dimensions(self):
        """Gets the dimensions of this Artwork.  # noqa: E501


        :return: The dimensions of this Artwork.  # noqa: E501
        :rtype: object
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this Artwork.


        :param dimensions: The dimensions of this Artwork.  # noqa: E501
        :type: object
        """
        if dimensions is None:
            raise ValueError("Invalid value for `dimensions`, must not be `None`")  # noqa: E501

        self._dimensions = dimensions

    @property
    def artwork_file_array(self):
        """Gets the artwork_file_array of this Artwork.  # noqa: E501


        :return: The artwork_file_array of this Artwork.  # noqa: E501
        :rtype: object
        """
        return self._artwork_file_array

    @artwork_file_array.setter
    def artwork_file_array(self, artwork_file_array):
        """Sets the artwork_file_array of this Artwork.


        :param artwork_file_array: The artwork_file_array of this Artwork.  # noqa: E501
        :type: object
        """
        if artwork_file_array is None:
            raise ValueError("Invalid value for `artwork_file_array`, must not be `None`")  # noqa: E501

        self._artwork_file_array = artwork_file_array

    @property
    def instructions(self):
        """Gets the instructions of this Artwork.  # noqa: E501

        Any instructions regarding the processing or modification of artwork. `Adding instructions will cause delays in processing`  # noqa: E501

        :return: The instructions of this Artwork.  # noqa: E501
        :rtype: object
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this Artwork.

        Any instructions regarding the processing or modification of artwork. `Adding instructions will cause delays in processing`  # noqa: E501

        :param instructions: The instructions of this Artwork.  # noqa: E501
        :type: object
        """
        if instructions is None:
            raise ValueError("Invalid value for `instructions`, must not be `None`")  # noqa: E501

        self._instructions = instructions

    @property
    def layers(self):
        """Gets the layers of this Artwork.  # noqa: E501


        :return: The layers of this Artwork.  # noqa: E501
        :rtype: object
        """
        return self._layers

    @layers.setter
    def layers(self, layers):
        """Sets the layers of this Artwork.


        :param layers: The layers of this Artwork.  # noqa: E501
        :type: object
        """
        if layers is None:
            raise ValueError("Invalid value for `layers`, must not be `None`")  # noqa: E501

        self._layers = layers

    @property
    def typeset_array(self):
        """Gets the typeset_array of this Artwork.  # noqa: E501


        :return: The typeset_array of this Artwork.  # noqa: E501
        :rtype: object
        """
        return self._typeset_array

    @typeset_array.setter
    def typeset_array(self, typeset_array):
        """Sets the typeset_array of this Artwork.


        :param typeset_array: The typeset_array of this Artwork.  # noqa: E501
        :type: object
        """
        if typeset_array is None:
            raise ValueError("Invalid value for `typeset_array`, must not be `None`")  # noqa: E501

        self._typeset_array = typeset_array

    @property
    def total_stitch_count(self):
        """Gets the total_stitch_count of this Artwork.  # noqa: E501

        The total stitch count for the specified embroidery art  # noqa: E501

        :return: The total_stitch_count of this Artwork.  # noqa: E501
        :rtype: object
        """
        return self._total_stitch_count

    @total_stitch_count.setter
    def total_stitch_count(self, total_stitch_count):
        """Sets the total_stitch_count of this Artwork.

        The total stitch count for the specified embroidery art  # noqa: E501

        :param total_stitch_count: The total_stitch_count of this Artwork.  # noqa: E501
        :type: object
        """
        if total_stitch_count is None:
            raise ValueError("Invalid value for `total_stitch_count`, must not be `None`")  # noqa: E501

        self._total_stitch_count = total_stitch_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Artwork, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Artwork):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
