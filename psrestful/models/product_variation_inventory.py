# coding: utf-8

"""
    PS RESTful Service API

    A proxy service for PromoStandards SOAP to a REST API  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductVariationInventory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'part_id': 'object',
        'part_description': 'object',
        'part_brand': 'object',
        'price_variance': 'object',
        'quantity_available': 'object',
        'attribute_color': 'object',
        'attribute_size': 'object',
        'attribute_selection': 'object',
        'attribute_flex_array': 'object',
        'custom_product_message': 'object',
        'entry_type': 'object',
        'valid_timestamp': 'object'
    }

    attribute_map = {
        'part_id': 'partID',
        'part_description': 'partDescription',
        'part_brand': 'partBrand',
        'price_variance': 'priceVariance',
        'quantity_available': 'quantityAvailable',
        'attribute_color': 'attributeColor',
        'attribute_size': 'attributeSize',
        'attribute_selection': 'attributeSelection',
        'attribute_flex_array': 'AttributeFlexArray',
        'custom_product_message': 'customProductMessage',
        'entry_type': 'entryType',
        'valid_timestamp': 'validTimestamp'
    }

    def __init__(self, part_id=None, part_description=None, part_brand=None, price_variance=None, quantity_available=None, attribute_color=None, attribute_size=None, attribute_selection=None, attribute_flex_array=None, custom_product_message=None, entry_type=None, valid_timestamp=None):  # noqa: E501
        """ProductVariationInventory - a model defined in Swagger"""  # noqa: E501
        self._part_id = None
        self._part_description = None
        self._part_brand = None
        self._price_variance = None
        self._quantity_available = None
        self._attribute_color = None
        self._attribute_size = None
        self._attribute_selection = None
        self._attribute_flex_array = None
        self._custom_product_message = None
        self._entry_type = None
        self._valid_timestamp = None
        self.discriminator = None
        self.part_id = part_id
        if part_description is not None:
            self.part_description = part_description
        if part_brand is not None:
            self.part_brand = part_brand
        if price_variance is not None:
            self.price_variance = price_variance
        self.quantity_available = quantity_available
        if attribute_color is not None:
            self.attribute_color = attribute_color
        if attribute_size is not None:
            self.attribute_size = attribute_size
        if attribute_selection is not None:
            self.attribute_selection = attribute_selection
        if attribute_flex_array is not None:
            self.attribute_flex_array = attribute_flex_array
        if custom_product_message is not None:
            self.custom_product_message = custom_product_message
        if entry_type is not None:
            self.entry_type = entry_type
        if valid_timestamp is not None:
            self.valid_timestamp = valid_timestamp

    @property
    def part_id(self):
        """Gets the part_id of this ProductVariationInventory.  # noqa: E501


        :return: The part_id of this ProductVariationInventory.  # noqa: E501
        :rtype: object
        """
        return self._part_id

    @part_id.setter
    def part_id(self, part_id):
        """Sets the part_id of this ProductVariationInventory.


        :param part_id: The part_id of this ProductVariationInventory.  # noqa: E501
        :type: object
        """
        if part_id is None:
            raise ValueError("Invalid value for `part_id`, must not be `None`")  # noqa: E501

        self._part_id = part_id

    @property
    def part_description(self):
        """Gets the part_description of this ProductVariationInventory.  # noqa: E501


        :return: The part_description of this ProductVariationInventory.  # noqa: E501
        :rtype: object
        """
        return self._part_description

    @part_description.setter
    def part_description(self, part_description):
        """Sets the part_description of this ProductVariationInventory.


        :param part_description: The part_description of this ProductVariationInventory.  # noqa: E501
        :type: object
        """

        self._part_description = part_description

    @property
    def part_brand(self):
        """Gets the part_brand of this ProductVariationInventory.  # noqa: E501


        :return: The part_brand of this ProductVariationInventory.  # noqa: E501
        :rtype: object
        """
        return self._part_brand

    @part_brand.setter
    def part_brand(self, part_brand):
        """Sets the part_brand of this ProductVariationInventory.


        :param part_brand: The part_brand of this ProductVariationInventory.  # noqa: E501
        :type: object
        """

        self._part_brand = part_brand

    @property
    def price_variance(self):
        """Gets the price_variance of this ProductVariationInventory.  # noqa: E501


        :return: The price_variance of this ProductVariationInventory.  # noqa: E501
        :rtype: object
        """
        return self._price_variance

    @price_variance.setter
    def price_variance(self, price_variance):
        """Sets the price_variance of this ProductVariationInventory.


        :param price_variance: The price_variance of this ProductVariationInventory.  # noqa: E501
        :type: object
        """

        self._price_variance = price_variance

    @property
    def quantity_available(self):
        """Gets the quantity_available of this ProductVariationInventory.  # noqa: E501


        :return: The quantity_available of this ProductVariationInventory.  # noqa: E501
        :rtype: object
        """
        return self._quantity_available

    @quantity_available.setter
    def quantity_available(self, quantity_available):
        """Sets the quantity_available of this ProductVariationInventory.


        :param quantity_available: The quantity_available of this ProductVariationInventory.  # noqa: E501
        :type: object
        """
        if quantity_available is None:
            raise ValueError("Invalid value for `quantity_available`, must not be `None`")  # noqa: E501

        self._quantity_available = quantity_available

    @property
    def attribute_color(self):
        """Gets the attribute_color of this ProductVariationInventory.  # noqa: E501


        :return: The attribute_color of this ProductVariationInventory.  # noqa: E501
        :rtype: object
        """
        return self._attribute_color

    @attribute_color.setter
    def attribute_color(self, attribute_color):
        """Sets the attribute_color of this ProductVariationInventory.


        :param attribute_color: The attribute_color of this ProductVariationInventory.  # noqa: E501
        :type: object
        """

        self._attribute_color = attribute_color

    @property
    def attribute_size(self):
        """Gets the attribute_size of this ProductVariationInventory.  # noqa: E501


        :return: The attribute_size of this ProductVariationInventory.  # noqa: E501
        :rtype: object
        """
        return self._attribute_size

    @attribute_size.setter
    def attribute_size(self, attribute_size):
        """Sets the attribute_size of this ProductVariationInventory.


        :param attribute_size: The attribute_size of this ProductVariationInventory.  # noqa: E501
        :type: object
        """

        self._attribute_size = attribute_size

    @property
    def attribute_selection(self):
        """Gets the attribute_selection of this ProductVariationInventory.  # noqa: E501


        :return: The attribute_selection of this ProductVariationInventory.  # noqa: E501
        :rtype: object
        """
        return self._attribute_selection

    @attribute_selection.setter
    def attribute_selection(self, attribute_selection):
        """Sets the attribute_selection of this ProductVariationInventory.


        :param attribute_selection: The attribute_selection of this ProductVariationInventory.  # noqa: E501
        :type: object
        """

        self._attribute_selection = attribute_selection

    @property
    def attribute_flex_array(self):
        """Gets the attribute_flex_array of this ProductVariationInventory.  # noqa: E501


        :return: The attribute_flex_array of this ProductVariationInventory.  # noqa: E501
        :rtype: object
        """
        return self._attribute_flex_array

    @attribute_flex_array.setter
    def attribute_flex_array(self, attribute_flex_array):
        """Sets the attribute_flex_array of this ProductVariationInventory.


        :param attribute_flex_array: The attribute_flex_array of this ProductVariationInventory.  # noqa: E501
        :type: object
        """

        self._attribute_flex_array = attribute_flex_array

    @property
    def custom_product_message(self):
        """Gets the custom_product_message of this ProductVariationInventory.  # noqa: E501


        :return: The custom_product_message of this ProductVariationInventory.  # noqa: E501
        :rtype: object
        """
        return self._custom_product_message

    @custom_product_message.setter
    def custom_product_message(self, custom_product_message):
        """Sets the custom_product_message of this ProductVariationInventory.


        :param custom_product_message: The custom_product_message of this ProductVariationInventory.  # noqa: E501
        :type: object
        """

        self._custom_product_message = custom_product_message

    @property
    def entry_type(self):
        """Gets the entry_type of this ProductVariationInventory.  # noqa: E501


        :return: The entry_type of this ProductVariationInventory.  # noqa: E501
        :rtype: object
        """
        return self._entry_type

    @entry_type.setter
    def entry_type(self, entry_type):
        """Sets the entry_type of this ProductVariationInventory.


        :param entry_type: The entry_type of this ProductVariationInventory.  # noqa: E501
        :type: object
        """

        self._entry_type = entry_type

    @property
    def valid_timestamp(self):
        """Gets the valid_timestamp of this ProductVariationInventory.  # noqa: E501


        :return: The valid_timestamp of this ProductVariationInventory.  # noqa: E501
        :rtype: object
        """
        return self._valid_timestamp

    @valid_timestamp.setter
    def valid_timestamp(self, valid_timestamp):
        """Sets the valid_timestamp of this ProductVariationInventory.


        :param valid_timestamp: The valid_timestamp of this ProductVariationInventory.  # noqa: E501
        :type: object
        """

        self._valid_timestamp = valid_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductVariationInventory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductVariationInventory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
