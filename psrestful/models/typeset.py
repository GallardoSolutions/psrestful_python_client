# coding: utf-8

"""
    PS RESTful Service API

    A proxy service for PromoStandards SOAP to a REST API  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Typeset(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sequence_number': 'object',
        'value': 'object',
        'font': 'object',
        'font_size': 'object'
    }

    attribute_map = {
        'sequence_number': 'sequenceNumber',
        'value': 'value',
        'font': 'font',
        'font_size': 'fontSize'
    }

    def __init__(self, sequence_number=None, value=None, font=None, font_size=None):  # noqa: E501
        """Typeset - a model defined in Swagger"""  # noqa: E501
        self._sequence_number = None
        self._value = None
        self._font = None
        self._font_size = None
        self.discriminator = None
        self.sequence_number = sequence_number
        self.value = value
        self.font = font
        self.font_size = font_size

    @property
    def sequence_number(self):
        """Gets the sequence_number of this Typeset.  # noqa: E501

        The order number of the typeset  # noqa: E501

        :return: The sequence_number of this Typeset.  # noqa: E501
        :rtype: object
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this Typeset.

        The order number of the typeset  # noqa: E501

        :param sequence_number: The sequence_number of this Typeset.  # noqa: E501
        :type: object
        """
        if sequence_number is None:
            raise ValueError("Invalid value for `sequence_number`, must not be `None`")  # noqa: E501

        self._sequence_number = sequence_number

    @property
    def value(self):
        """Gets the value of this Typeset.  # noqa: E501

        The typeset to be used on the order  # noqa: E501

        :return: The value of this Typeset.  # noqa: E501
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Typeset.

        The typeset to be used on the order  # noqa: E501

        :param value: The value of this Typeset.  # noqa: E501
        :type: object
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def font(self):
        """Gets the font of this Typeset.  # noqa: E501


        :return: The font of this Typeset.  # noqa: E501
        :rtype: object
        """
        return self._font

    @font.setter
    def font(self, font):
        """Sets the font of this Typeset.


        :param font: The font of this Typeset.  # noqa: E501
        :type: object
        """
        if font is None:
            raise ValueError("Invalid value for `font`, must not be `None`")  # noqa: E501

        self._font = font

    @property
    def font_size(self):
        """Gets the font_size of this Typeset.  # noqa: E501

        The font size to use for the typeset  # noqa: E501

        :return: The font_size of this Typeset.  # noqa: E501
        :rtype: object
        """
        return self._font_size

    @font_size.setter
    def font_size(self, font_size):
        """Sets the font_size of this Typeset.

        The font size to use for the typeset  # noqa: E501

        :param font_size: The font_size of this Typeset.  # noqa: E501
        :type: object
        """
        if font_size is None:
            raise ValueError("Invalid value for `font_size`, must not be `None`")  # noqa: E501

        self._font_size = font_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Typeset, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Typeset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
