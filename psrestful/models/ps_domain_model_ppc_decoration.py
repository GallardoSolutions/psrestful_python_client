# coding: utf-8

"""
    PS RESTful Service API

    A proxy service for PromoStandards SOAP to a REST API  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PsDomainModelPpcDecoration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'decoration_id': 'object',
        'decoration_name': 'object',
        'decoration_geometry': 'object',
        'decoration_height': 'object',
        'decoration_width': 'object',
        'decoration_diameter': 'object',
        'decoration_uom': 'object',
        'allow_sub_for_default_location': 'object',
        'allow_sub_for_default_method': 'object',
        'item_part_quantity_ltm': 'object',
        'charge_array': 'object',
        'decoration_units_included': 'object',
        'decoration_units_included_uom': 'object',
        'decoration_units_max': 'object',
        'default_decoration': 'object',
        'lead_time': 'object',
        'rush_lead_time': 'object'
    }

    attribute_map = {
        'decoration_id': 'decorationId',
        'decoration_name': 'decorationName',
        'decoration_geometry': 'decorationGeometry',
        'decoration_height': 'decorationHeight',
        'decoration_width': 'decorationWidth',
        'decoration_diameter': 'decorationDiameter',
        'decoration_uom': 'decorationUom',
        'allow_sub_for_default_location': 'allowSubForDefaultLocation',
        'allow_sub_for_default_method': 'allowSubForDefaultMethod',
        'item_part_quantity_ltm': 'itemPartQuantityLTM',
        'charge_array': 'ChargeArray',
        'decoration_units_included': 'decorationUnitsIncluded',
        'decoration_units_included_uom': 'decorationUnitsIncludedUom',
        'decoration_units_max': 'decorationUnitsMax',
        'default_decoration': 'defaultDecoration',
        'lead_time': 'leadTime',
        'rush_lead_time': 'rushLeadTime'
    }

    def __init__(self, decoration_id=None, decoration_name=None, decoration_geometry=None, decoration_height=None, decoration_width=None, decoration_diameter=None, decoration_uom=None, allow_sub_for_default_location=None, allow_sub_for_default_method=None, item_part_quantity_ltm=None, charge_array=None, decoration_units_included=None, decoration_units_included_uom=None, decoration_units_max=None, default_decoration=None, lead_time=None, rush_lead_time=None):  # noqa: E501
        """PsDomainModelPpcDecoration - a model defined in Swagger"""  # noqa: E501
        self._decoration_id = None
        self._decoration_name = None
        self._decoration_geometry = None
        self._decoration_height = None
        self._decoration_width = None
        self._decoration_diameter = None
        self._decoration_uom = None
        self._allow_sub_for_default_location = None
        self._allow_sub_for_default_method = None
        self._item_part_quantity_ltm = None
        self._charge_array = None
        self._decoration_units_included = None
        self._decoration_units_included_uom = None
        self._decoration_units_max = None
        self._default_decoration = None
        self._lead_time = None
        self._rush_lead_time = None
        self.discriminator = None
        self.decoration_id = decoration_id
        self.decoration_name = decoration_name
        self.decoration_geometry = decoration_geometry
        self.decoration_height = decoration_height
        self.decoration_width = decoration_width
        self.decoration_diameter = decoration_diameter
        self.decoration_uom = decoration_uom
        self.allow_sub_for_default_location = allow_sub_for_default_location
        self.allow_sub_for_default_method = allow_sub_for_default_method
        if item_part_quantity_ltm is not None:
            self.item_part_quantity_ltm = item_part_quantity_ltm
        self.charge_array = charge_array
        self.decoration_units_included = decoration_units_included
        self.decoration_units_included_uom = decoration_units_included_uom
        self.decoration_units_max = decoration_units_max
        self.default_decoration = default_decoration
        self.lead_time = lead_time
        self.rush_lead_time = rush_lead_time

    @property
    def decoration_id(self):
        """Gets the decoration_id of this PsDomainModelPpcDecoration.  # noqa: E501


        :return: The decoration_id of this PsDomainModelPpcDecoration.  # noqa: E501
        :rtype: object
        """
        return self._decoration_id

    @decoration_id.setter
    def decoration_id(self, decoration_id):
        """Sets the decoration_id of this PsDomainModelPpcDecoration.


        :param decoration_id: The decoration_id of this PsDomainModelPpcDecoration.  # noqa: E501
        :type: object
        """
        if decoration_id is None:
            raise ValueError("Invalid value for `decoration_id`, must not be `None`")  # noqa: E501

        self._decoration_id = decoration_id

    @property
    def decoration_name(self):
        """Gets the decoration_name of this PsDomainModelPpcDecoration.  # noqa: E501


        :return: The decoration_name of this PsDomainModelPpcDecoration.  # noqa: E501
        :rtype: object
        """
        return self._decoration_name

    @decoration_name.setter
    def decoration_name(self, decoration_name):
        """Sets the decoration_name of this PsDomainModelPpcDecoration.


        :param decoration_name: The decoration_name of this PsDomainModelPpcDecoration.  # noqa: E501
        :type: object
        """
        if decoration_name is None:
            raise ValueError("Invalid value for `decoration_name`, must not be `None`")  # noqa: E501

        self._decoration_name = decoration_name

    @property
    def decoration_geometry(self):
        """Gets the decoration_geometry of this PsDomainModelPpcDecoration.  # noqa: E501


        :return: The decoration_geometry of this PsDomainModelPpcDecoration.  # noqa: E501
        :rtype: object
        """
        return self._decoration_geometry

    @decoration_geometry.setter
    def decoration_geometry(self, decoration_geometry):
        """Sets the decoration_geometry of this PsDomainModelPpcDecoration.


        :param decoration_geometry: The decoration_geometry of this PsDomainModelPpcDecoration.  # noqa: E501
        :type: object
        """
        if decoration_geometry is None:
            raise ValueError("Invalid value for `decoration_geometry`, must not be `None`")  # noqa: E501

        self._decoration_geometry = decoration_geometry

    @property
    def decoration_height(self):
        """Gets the decoration_height of this PsDomainModelPpcDecoration.  # noqa: E501


        :return: The decoration_height of this PsDomainModelPpcDecoration.  # noqa: E501
        :rtype: object
        """
        return self._decoration_height

    @decoration_height.setter
    def decoration_height(self, decoration_height):
        """Sets the decoration_height of this PsDomainModelPpcDecoration.


        :param decoration_height: The decoration_height of this PsDomainModelPpcDecoration.  # noqa: E501
        :type: object
        """
        if decoration_height is None:
            raise ValueError("Invalid value for `decoration_height`, must not be `None`")  # noqa: E501

        self._decoration_height = decoration_height

    @property
    def decoration_width(self):
        """Gets the decoration_width of this PsDomainModelPpcDecoration.  # noqa: E501


        :return: The decoration_width of this PsDomainModelPpcDecoration.  # noqa: E501
        :rtype: object
        """
        return self._decoration_width

    @decoration_width.setter
    def decoration_width(self, decoration_width):
        """Sets the decoration_width of this PsDomainModelPpcDecoration.


        :param decoration_width: The decoration_width of this PsDomainModelPpcDecoration.  # noqa: E501
        :type: object
        """
        if decoration_width is None:
            raise ValueError("Invalid value for `decoration_width`, must not be `None`")  # noqa: E501

        self._decoration_width = decoration_width

    @property
    def decoration_diameter(self):
        """Gets the decoration_diameter of this PsDomainModelPpcDecoration.  # noqa: E501


        :return: The decoration_diameter of this PsDomainModelPpcDecoration.  # noqa: E501
        :rtype: object
        """
        return self._decoration_diameter

    @decoration_diameter.setter
    def decoration_diameter(self, decoration_diameter):
        """Sets the decoration_diameter of this PsDomainModelPpcDecoration.


        :param decoration_diameter: The decoration_diameter of this PsDomainModelPpcDecoration.  # noqa: E501
        :type: object
        """
        if decoration_diameter is None:
            raise ValueError("Invalid value for `decoration_diameter`, must not be `None`")  # noqa: E501

        self._decoration_diameter = decoration_diameter

    @property
    def decoration_uom(self):
        """Gets the decoration_uom of this PsDomainModelPpcDecoration.  # noqa: E501

        The unit of measure for the decoration area  # noqa: E501

        :return: The decoration_uom of this PsDomainModelPpcDecoration.  # noqa: E501
        :rtype: object
        """
        return self._decoration_uom

    @decoration_uom.setter
    def decoration_uom(self, decoration_uom):
        """Sets the decoration_uom of this PsDomainModelPpcDecoration.

        The unit of measure for the decoration area  # noqa: E501

        :param decoration_uom: The decoration_uom of this PsDomainModelPpcDecoration.  # noqa: E501
        :type: object
        """
        if decoration_uom is None:
            raise ValueError("Invalid value for `decoration_uom`, must not be `None`")  # noqa: E501

        self._decoration_uom = decoration_uom

    @property
    def allow_sub_for_default_location(self):
        """Gets the allow_sub_for_default_location of this PsDomainModelPpcDecoration.  # noqa: E501

        Buyer is allowed to substitute a decoration location without changing the price  # noqa: E501

        :return: The allow_sub_for_default_location of this PsDomainModelPpcDecoration.  # noqa: E501
        :rtype: object
        """
        return self._allow_sub_for_default_location

    @allow_sub_for_default_location.setter
    def allow_sub_for_default_location(self, allow_sub_for_default_location):
        """Sets the allow_sub_for_default_location of this PsDomainModelPpcDecoration.

        Buyer is allowed to substitute a decoration location without changing the price  # noqa: E501

        :param allow_sub_for_default_location: The allow_sub_for_default_location of this PsDomainModelPpcDecoration.  # noqa: E501
        :type: object
        """
        if allow_sub_for_default_location is None:
            raise ValueError("Invalid value for `allow_sub_for_default_location`, must not be `None`")  # noqa: E501

        self._allow_sub_for_default_location = allow_sub_for_default_location

    @property
    def allow_sub_for_default_method(self):
        """Gets the allow_sub_for_default_method of this PsDomainModelPpcDecoration.  # noqa: E501

        Buyer is allowed to substitute this decoration method without changing the price  # noqa: E501

        :return: The allow_sub_for_default_method of this PsDomainModelPpcDecoration.  # noqa: E501
        :rtype: object
        """
        return self._allow_sub_for_default_method

    @allow_sub_for_default_method.setter
    def allow_sub_for_default_method(self, allow_sub_for_default_method):
        """Sets the allow_sub_for_default_method of this PsDomainModelPpcDecoration.

        Buyer is allowed to substitute this decoration method without changing the price  # noqa: E501

        :param allow_sub_for_default_method: The allow_sub_for_default_method of this PsDomainModelPpcDecoration.  # noqa: E501
        :type: object
        """
        if allow_sub_for_default_method is None:
            raise ValueError("Invalid value for `allow_sub_for_default_method`, must not be `None`")  # noqa: E501

        self._allow_sub_for_default_method = allow_sub_for_default_method

    @property
    def item_part_quantity_ltm(self):
        """Gets the item_part_quantity_ltm of this PsDomainModelPpcDecoration.  # noqa: E501


        :return: The item_part_quantity_ltm of this PsDomainModelPpcDecoration.  # noqa: E501
        :rtype: object
        """
        return self._item_part_quantity_ltm

    @item_part_quantity_ltm.setter
    def item_part_quantity_ltm(self, item_part_quantity_ltm):
        """Sets the item_part_quantity_ltm of this PsDomainModelPpcDecoration.


        :param item_part_quantity_ltm: The item_part_quantity_ltm of this PsDomainModelPpcDecoration.  # noqa: E501
        :type: object
        """

        self._item_part_quantity_ltm = item_part_quantity_ltm

    @property
    def charge_array(self):
        """Gets the charge_array of this PsDomainModelPpcDecoration.  # noqa: E501


        :return: The charge_array of this PsDomainModelPpcDecoration.  # noqa: E501
        :rtype: object
        """
        return self._charge_array

    @charge_array.setter
    def charge_array(self, charge_array):
        """Sets the charge_array of this PsDomainModelPpcDecoration.


        :param charge_array: The charge_array of this PsDomainModelPpcDecoration.  # noqa: E501
        :type: object
        """
        if charge_array is None:
            raise ValueError("Invalid value for `charge_array`, must not be `None`")  # noqa: E501

        self._charge_array = charge_array

    @property
    def decoration_units_included(self):
        """Gets the decoration_units_included of this PsDomainModelPpcDecoration.  # noqa: E501

        The number of included decoration units. For example, if 1 color decoration is included set value to “1”. If 7,500 stitches are included set value to “7500”  # noqa: E501

        :return: The decoration_units_included of this PsDomainModelPpcDecoration.  # noqa: E501
        :rtype: object
        """
        return self._decoration_units_included

    @decoration_units_included.setter
    def decoration_units_included(self, decoration_units_included):
        """Sets the decoration_units_included of this PsDomainModelPpcDecoration.

        The number of included decoration units. For example, if 1 color decoration is included set value to “1”. If 7,500 stitches are included set value to “7500”  # noqa: E501

        :param decoration_units_included: The decoration_units_included of this PsDomainModelPpcDecoration.  # noqa: E501
        :type: object
        """
        if decoration_units_included is None:
            raise ValueError("Invalid value for `decoration_units_included`, must not be `None`")  # noqa: E501

        self._decoration_units_included = decoration_units_included

    @property
    def decoration_units_included_uom(self):
        """Gets the decoration_units_included_uom of this PsDomainModelPpcDecoration.  # noqa: E501


        :return: The decoration_units_included_uom of this PsDomainModelPpcDecoration.  # noqa: E501
        :rtype: object
        """
        return self._decoration_units_included_uom

    @decoration_units_included_uom.setter
    def decoration_units_included_uom(self, decoration_units_included_uom):
        """Sets the decoration_units_included_uom of this PsDomainModelPpcDecoration.


        :param decoration_units_included_uom: The decoration_units_included_uom of this PsDomainModelPpcDecoration.  # noqa: E501
        :type: object
        """
        if decoration_units_included_uom is None:
            raise ValueError("Invalid value for `decoration_units_included_uom`, must not be `None`")  # noqa: E501

        self._decoration_units_included_uom = decoration_units_included_uom

    @property
    def decoration_units_max(self):
        """Gets the decoration_units_max of this PsDomainModelPpcDecoration.  # noqa: E501

        This is the max number of decoration units for this decoration/location combination.  # noqa: E501

        :return: The decoration_units_max of this PsDomainModelPpcDecoration.  # noqa: E501
        :rtype: object
        """
        return self._decoration_units_max

    @decoration_units_max.setter
    def decoration_units_max(self, decoration_units_max):
        """Sets the decoration_units_max of this PsDomainModelPpcDecoration.

        This is the max number of decoration units for this decoration/location combination.  # noqa: E501

        :param decoration_units_max: The decoration_units_max of this PsDomainModelPpcDecoration.  # noqa: E501
        :type: object
        """
        if decoration_units_max is None:
            raise ValueError("Invalid value for `decoration_units_max`, must not be `None`")  # noqa: E501

        self._decoration_units_max = decoration_units_max

    @property
    def default_decoration(self):
        """Gets the default_decoration of this PsDomainModelPpcDecoration.  # noqa: E501

        Specifies whether this is the default decoration for this location  # noqa: E501

        :return: The default_decoration of this PsDomainModelPpcDecoration.  # noqa: E501
        :rtype: object
        """
        return self._default_decoration

    @default_decoration.setter
    def default_decoration(self, default_decoration):
        """Sets the default_decoration of this PsDomainModelPpcDecoration.

        Specifies whether this is the default decoration for this location  # noqa: E501

        :param default_decoration: The default_decoration of this PsDomainModelPpcDecoration.  # noqa: E501
        :type: object
        """
        if default_decoration is None:
            raise ValueError("Invalid value for `default_decoration`, must not be `None`")  # noqa: E501

        self._default_decoration = default_decoration

    @property
    def lead_time(self):
        """Gets the lead_time of this PsDomainModelPpcDecoration.  # noqa: E501

        The lead time for the given decoration  # noqa: E501

        :return: The lead_time of this PsDomainModelPpcDecoration.  # noqa: E501
        :rtype: object
        """
        return self._lead_time

    @lead_time.setter
    def lead_time(self, lead_time):
        """Sets the lead_time of this PsDomainModelPpcDecoration.

        The lead time for the given decoration  # noqa: E501

        :param lead_time: The lead_time of this PsDomainModelPpcDecoration.  # noqa: E501
        :type: object
        """
        if lead_time is None:
            raise ValueError("Invalid value for `lead_time`, must not be `None`")  # noqa: E501

        self._lead_time = lead_time

    @property
    def rush_lead_time(self):
        """Gets the rush_lead_time of this PsDomainModelPpcDecoration.  # noqa: E501

        The lead time for rush service for a given decoration (rush charges may apply)  # noqa: E501

        :return: The rush_lead_time of this PsDomainModelPpcDecoration.  # noqa: E501
        :rtype: object
        """
        return self._rush_lead_time

    @rush_lead_time.setter
    def rush_lead_time(self, rush_lead_time):
        """Sets the rush_lead_time of this PsDomainModelPpcDecoration.

        The lead time for rush service for a given decoration (rush charges may apply)  # noqa: E501

        :param rush_lead_time: The rush_lead_time of this PsDomainModelPpcDecoration.  # noqa: E501
        :type: object
        """
        if rush_lead_time is None:
            raise ValueError("Invalid value for `rush_lead_time`, must not be `None`")  # noqa: E501

        self._rush_lead_time = rush_lead_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PsDomainModelPpcDecoration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PsDomainModelPpcDecoration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
