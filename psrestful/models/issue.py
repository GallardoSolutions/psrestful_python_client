# coding: utf-8

"""
    PS RESTful Service API

    A proxy service for PromoStandards SOAP to a REST API  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Issue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'issue_id': 'object',
        'issue_status': 'IssueStatus',
        'issue_category': 'object',
        'issue_name': 'object',
        'urgent_response_required': 'object',
        'issue_description': 'object',
        'response_required_by': 'object',
        'issue_resolution_url': 'object',
        'issue_blocking_status': 'object',
        'contact_array': 'object',
        'product_id': 'object',
        'resolution_array': 'object'
    }

    attribute_map = {
        'issue_id': 'issueId',
        'issue_status': 'issueStatus',
        'issue_category': 'issueCategory',
        'issue_name': 'issueName',
        'urgent_response_required': 'urgentResponseRequired',
        'issue_description': 'issueDescription',
        'response_required_by': 'responseRequiredBy',
        'issue_resolution_url': 'issueResolutionURL',
        'issue_blocking_status': 'issueBlockingStatus',
        'contact_array': 'ContactArray',
        'product_id': 'productId',
        'resolution_array': 'ResolutionArray'
    }

    def __init__(self, issue_id=None, issue_status=None, issue_category=None, issue_name=None, urgent_response_required=None, issue_description=None, response_required_by=None, issue_resolution_url=None, issue_blocking_status=None, contact_array=None, product_id=None, resolution_array=None):  # noqa: E501
        """Issue - a model defined in Swagger"""  # noqa: E501
        self._issue_id = None
        self._issue_status = None
        self._issue_category = None
        self._issue_name = None
        self._urgent_response_required = None
        self._issue_description = None
        self._response_required_by = None
        self._issue_resolution_url = None
        self._issue_blocking_status = None
        self._contact_array = None
        self._product_id = None
        self._resolution_array = None
        self.discriminator = None
        self.issue_id = issue_id
        self.issue_status = issue_status
        self.issue_category = issue_category
        self.issue_name = issue_name
        self.urgent_response_required = urgent_response_required
        self.issue_description = issue_description
        self.response_required_by = response_required_by
        self.issue_resolution_url = issue_resolution_url
        self.issue_blocking_status = issue_blocking_status
        if contact_array is not None:
            self.contact_array = contact_array
        if product_id is not None:
            self.product_id = product_id
        if resolution_array is not None:
            self.resolution_array = resolution_array

    @property
    def issue_id(self):
        """Gets the issue_id of this Issue.  # noqa: E501


        :return: The issue_id of this Issue.  # noqa: E501
        :rtype: object
        """
        return self._issue_id

    @issue_id.setter
    def issue_id(self, issue_id):
        """Sets the issue_id of this Issue.


        :param issue_id: The issue_id of this Issue.  # noqa: E501
        :type: object
        """
        if issue_id is None:
            raise ValueError("Invalid value for `issue_id`, must not be `None`")  # noqa: E501

        self._issue_id = issue_id

    @property
    def issue_status(self):
        """Gets the issue_status of this Issue.  # noqa: E501


        :return: The issue_status of this Issue.  # noqa: E501
        :rtype: IssueStatus
        """
        return self._issue_status

    @issue_status.setter
    def issue_status(self, issue_status):
        """Sets the issue_status of this Issue.


        :param issue_status: The issue_status of this Issue.  # noqa: E501
        :type: IssueStatus
        """
        if issue_status is None:
            raise ValueError("Invalid value for `issue_status`, must not be `None`")  # noqa: E501

        self._issue_status = issue_status

    @property
    def issue_category(self):
        """Gets the issue_category of this Issue.  # noqa: E501


        :return: The issue_category of this Issue.  # noqa: E501
        :rtype: object
        """
        return self._issue_category

    @issue_category.setter
    def issue_category(self, issue_category):
        """Sets the issue_category of this Issue.


        :param issue_category: The issue_category of this Issue.  # noqa: E501
        :type: object
        """
        if issue_category is None:
            raise ValueError("Invalid value for `issue_category`, must not be `None`")  # noqa: E501

        self._issue_category = issue_category

    @property
    def issue_name(self):
        """Gets the issue_name of this Issue.  # noqa: E501


        :return: The issue_name of this Issue.  # noqa: E501
        :rtype: object
        """
        return self._issue_name

    @issue_name.setter
    def issue_name(self, issue_name):
        """Sets the issue_name of this Issue.


        :param issue_name: The issue_name of this Issue.  # noqa: E501
        :type: object
        """
        if issue_name is None:
            raise ValueError("Invalid value for `issue_name`, must not be `None`")  # noqa: E501

        self._issue_name = issue_name

    @property
    def urgent_response_required(self):
        """Gets the urgent_response_required of this Issue.  # noqa: E501


        :return: The urgent_response_required of this Issue.  # noqa: E501
        :rtype: object
        """
        return self._urgent_response_required

    @urgent_response_required.setter
    def urgent_response_required(self, urgent_response_required):
        """Sets the urgent_response_required of this Issue.


        :param urgent_response_required: The urgent_response_required of this Issue.  # noqa: E501
        :type: object
        """
        if urgent_response_required is None:
            raise ValueError("Invalid value for `urgent_response_required`, must not be `None`")  # noqa: E501

        self._urgent_response_required = urgent_response_required

    @property
    def issue_description(self):
        """Gets the issue_description of this Issue.  # noqa: E501


        :return: The issue_description of this Issue.  # noqa: E501
        :rtype: object
        """
        return self._issue_description

    @issue_description.setter
    def issue_description(self, issue_description):
        """Sets the issue_description of this Issue.


        :param issue_description: The issue_description of this Issue.  # noqa: E501
        :type: object
        """
        if issue_description is None:
            raise ValueError("Invalid value for `issue_description`, must not be `None`")  # noqa: E501

        self._issue_description = issue_description

    @property
    def response_required_by(self):
        """Gets the response_required_by of this Issue.  # noqa: E501


        :return: The response_required_by of this Issue.  # noqa: E501
        :rtype: object
        """
        return self._response_required_by

    @response_required_by.setter
    def response_required_by(self, response_required_by):
        """Sets the response_required_by of this Issue.


        :param response_required_by: The response_required_by of this Issue.  # noqa: E501
        :type: object
        """
        if response_required_by is None:
            raise ValueError("Invalid value for `response_required_by`, must not be `None`")  # noqa: E501

        self._response_required_by = response_required_by

    @property
    def issue_resolution_url(self):
        """Gets the issue_resolution_url of this Issue.  # noqa: E501


        :return: The issue_resolution_url of this Issue.  # noqa: E501
        :rtype: object
        """
        return self._issue_resolution_url

    @issue_resolution_url.setter
    def issue_resolution_url(self, issue_resolution_url):
        """Sets the issue_resolution_url of this Issue.


        :param issue_resolution_url: The issue_resolution_url of this Issue.  # noqa: E501
        :type: object
        """
        if issue_resolution_url is None:
            raise ValueError("Invalid value for `issue_resolution_url`, must not be `None`")  # noqa: E501

        self._issue_resolution_url = issue_resolution_url

    @property
    def issue_blocking_status(self):
        """Gets the issue_blocking_status of this Issue.  # noqa: E501


        :return: The issue_blocking_status of this Issue.  # noqa: E501
        :rtype: object
        """
        return self._issue_blocking_status

    @issue_blocking_status.setter
    def issue_blocking_status(self, issue_blocking_status):
        """Sets the issue_blocking_status of this Issue.


        :param issue_blocking_status: The issue_blocking_status of this Issue.  # noqa: E501
        :type: object
        """
        if issue_blocking_status is None:
            raise ValueError("Invalid value for `issue_blocking_status`, must not be `None`")  # noqa: E501

        self._issue_blocking_status = issue_blocking_status

    @property
    def contact_array(self):
        """Gets the contact_array of this Issue.  # noqa: E501


        :return: The contact_array of this Issue.  # noqa: E501
        :rtype: object
        """
        return self._contact_array

    @contact_array.setter
    def contact_array(self, contact_array):
        """Sets the contact_array of this Issue.


        :param contact_array: The contact_array of this Issue.  # noqa: E501
        :type: object
        """

        self._contact_array = contact_array

    @property
    def product_id(self):
        """Gets the product_id of this Issue.  # noqa: E501


        :return: The product_id of this Issue.  # noqa: E501
        :rtype: object
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this Issue.


        :param product_id: The product_id of this Issue.  # noqa: E501
        :type: object
        """

        self._product_id = product_id

    @property
    def resolution_array(self):
        """Gets the resolution_array of this Issue.  # noqa: E501


        :return: The resolution_array of this Issue.  # noqa: E501
        :rtype: object
        """
        return self._resolution_array

    @resolution_array.setter
    def resolution_array(self, resolution_array):
        """Sets the resolution_array of this Issue.


        :param resolution_array: The resolution_array of this Issue.  # noqa: E501
        :type: object
        """

        self._resolution_array = resolution_array

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Issue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Issue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
