# coding: utf-8

"""
    PS RESTful Service API

    A proxy service for PromoStandards SOAP to a REST API  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Dimensions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'geometry': 'GeometryType',
        'use_max_location_dimensions': 'object',
        'height': 'object',
        'width': 'object',
        'diameter': 'object',
        'uom': 'object'
    }

    attribute_map = {
        'geometry': 'geometry',
        'use_max_location_dimensions': 'useMaxLocationDimensions',
        'height': 'height',
        'width': 'width',
        'diameter': 'diameter',
        'uom': 'uom'
    }

    def __init__(self, geometry=None, use_max_location_dimensions=None, height=None, width=None, diameter=None, uom=None):  # noqa: E501
        """Dimensions - a model defined in Swagger"""  # noqa: E501
        self._geometry = None
        self._use_max_location_dimensions = None
        self._height = None
        self._width = None
        self._diameter = None
        self._uom = None
        self.discriminator = None
        self.geometry = geometry
        self.use_max_location_dimensions = use_max_location_dimensions
        if height is not None:
            self.height = height
        if width is not None:
            self.width = width
        if diameter is not None:
            self.diameter = diameter
        if uom is not None:
            self.uom = uom

    @property
    def geometry(self):
        """Gets the geometry of this Dimensions.  # noqa: E501


        :return: The geometry of this Dimensions.  # noqa: E501
        :rtype: GeometryType
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this Dimensions.


        :param geometry: The geometry of this Dimensions.  # noqa: E501
        :type: GeometryType
        """
        if geometry is None:
            raise ValueError("Invalid value for `geometry`, must not be `None`")  # noqa: E501

        self._geometry = geometry

    @property
    def use_max_location_dimensions(self):
        """Gets the use_max_location_dimensions of this Dimensions.  # noqa: E501


        :return: The use_max_location_dimensions of this Dimensions.  # noqa: E501
        :rtype: object
        """
        return self._use_max_location_dimensions

    @use_max_location_dimensions.setter
    def use_max_location_dimensions(self, use_max_location_dimensions):
        """Sets the use_max_location_dimensions of this Dimensions.


        :param use_max_location_dimensions: The use_max_location_dimensions of this Dimensions.  # noqa: E501
        :type: object
        """
        if use_max_location_dimensions is None:
            raise ValueError("Invalid value for `use_max_location_dimensions`, must not be `None`")  # noqa: E501

        self._use_max_location_dimensions = use_max_location_dimensions

    @property
    def height(self):
        """Gets the height of this Dimensions.  # noqa: E501


        :return: The height of this Dimensions.  # noqa: E501
        :rtype: object
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Dimensions.


        :param height: The height of this Dimensions.  # noqa: E501
        :type: object
        """

        self._height = height

    @property
    def width(self):
        """Gets the width of this Dimensions.  # noqa: E501


        :return: The width of this Dimensions.  # noqa: E501
        :rtype: object
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Dimensions.


        :param width: The width of this Dimensions.  # noqa: E501
        :type: object
        """

        self._width = width

    @property
    def diameter(self):
        """Gets the diameter of this Dimensions.  # noqa: E501


        :return: The diameter of this Dimensions.  # noqa: E501
        :rtype: object
        """
        return self._diameter

    @diameter.setter
    def diameter(self, diameter):
        """Sets the diameter of this Dimensions.


        :param diameter: The diameter of this Dimensions.  # noqa: E501
        :type: object
        """

        self._diameter = diameter

    @property
    def uom(self):
        """Gets the uom of this Dimensions.  # noqa: E501


        :return: The uom of this Dimensions.  # noqa: E501
        :rtype: object
        """
        return self._uom

    @uom.setter
    def uom(self, uom):
        """Sets the uom of this Dimensions.


        :param uom: The uom of this Dimensions.  # noqa: E501
        :type: object
        """

        self._uom = uom

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Dimensions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Dimensions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
