# coding: utf-8

"""
    PS RESTful Service API

    A proxy service for PromoStandards SOAP to a REST API  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InvoiceLineItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'invoice_line_item_number': 'object',
        'product_id': 'object',
        'part_id': 'object',
        'charge_id': 'object',
        'purchase_order_line_item_number': 'object',
        'ordered_quantity': 'object',
        'invoice_quantity': 'object',
        'back_ordered_quantity': 'object',
        'quantity_uom': 'object',
        'line_item_description': 'object',
        'unit_price': 'object',
        'discount_amount': 'object',
        'extended_price': 'object',
        'distributor_product_id': 'object',
        'distributor_part_id': 'object'
    }

    attribute_map = {
        'invoice_line_item_number': 'invoiceLineItemNumber',
        'product_id': 'productId',
        'part_id': 'partId',
        'charge_id': 'chargeId',
        'purchase_order_line_item_number': 'purchaseOrderLineItemNumber',
        'ordered_quantity': 'orderedQuantity',
        'invoice_quantity': 'invoiceQuantity',
        'back_ordered_quantity': 'backOrderedQuantity',
        'quantity_uom': 'quantityUOM',
        'line_item_description': 'lineItemDescription',
        'unit_price': 'unitPrice',
        'discount_amount': 'discountAmount',
        'extended_price': 'extendedPrice',
        'distributor_product_id': 'distributorProductId',
        'distributor_part_id': 'distributorPartId'
    }

    def __init__(self, invoice_line_item_number=None, product_id=None, part_id=None, charge_id=None, purchase_order_line_item_number=None, ordered_quantity=None, invoice_quantity=None, back_ordered_quantity=None, quantity_uom=None, line_item_description=None, unit_price=None, discount_amount=None, extended_price=None, distributor_product_id=None, distributor_part_id=None):  # noqa: E501
        """InvoiceLineItem - a model defined in Swagger"""  # noqa: E501
        self._invoice_line_item_number = None
        self._product_id = None
        self._part_id = None
        self._charge_id = None
        self._purchase_order_line_item_number = None
        self._ordered_quantity = None
        self._invoice_quantity = None
        self._back_ordered_quantity = None
        self._quantity_uom = None
        self._line_item_description = None
        self._unit_price = None
        self._discount_amount = None
        self._extended_price = None
        self._distributor_product_id = None
        self._distributor_part_id = None
        self.discriminator = None
        self.invoice_line_item_number = invoice_line_item_number
        self.product_id = product_id
        self.part_id = part_id
        self.charge_id = charge_id
        self.purchase_order_line_item_number = purchase_order_line_item_number
        self.ordered_quantity = ordered_quantity
        self.invoice_quantity = invoice_quantity
        self.back_ordered_quantity = back_ordered_quantity
        self.quantity_uom = quantity_uom
        self.line_item_description = line_item_description
        self.unit_price = unit_price
        self.discount_amount = discount_amount
        self.extended_price = extended_price
        self.distributor_product_id = distributor_product_id
        self.distributor_part_id = distributor_part_id

    @property
    def invoice_line_item_number(self):
        """Gets the invoice_line_item_number of this InvoiceLineItem.  # noqa: E501


        :return: The invoice_line_item_number of this InvoiceLineItem.  # noqa: E501
        :rtype: object
        """
        return self._invoice_line_item_number

    @invoice_line_item_number.setter
    def invoice_line_item_number(self, invoice_line_item_number):
        """Sets the invoice_line_item_number of this InvoiceLineItem.


        :param invoice_line_item_number: The invoice_line_item_number of this InvoiceLineItem.  # noqa: E501
        :type: object
        """
        if invoice_line_item_number is None:
            raise ValueError("Invalid value for `invoice_line_item_number`, must not be `None`")  # noqa: E501

        self._invoice_line_item_number = invoice_line_item_number

    @property
    def product_id(self):
        """Gets the product_id of this InvoiceLineItem.  # noqa: E501


        :return: The product_id of this InvoiceLineItem.  # noqa: E501
        :rtype: object
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this InvoiceLineItem.


        :param product_id: The product_id of this InvoiceLineItem.  # noqa: E501
        :type: object
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")  # noqa: E501

        self._product_id = product_id

    @property
    def part_id(self):
        """Gets the part_id of this InvoiceLineItem.  # noqa: E501


        :return: The part_id of this InvoiceLineItem.  # noqa: E501
        :rtype: object
        """
        return self._part_id

    @part_id.setter
    def part_id(self, part_id):
        """Sets the part_id of this InvoiceLineItem.


        :param part_id: The part_id of this InvoiceLineItem.  # noqa: E501
        :type: object
        """
        if part_id is None:
            raise ValueError("Invalid value for `part_id`, must not be `None`")  # noqa: E501

        self._part_id = part_id

    @property
    def charge_id(self):
        """Gets the charge_id of this InvoiceLineItem.  # noqa: E501


        :return: The charge_id of this InvoiceLineItem.  # noqa: E501
        :rtype: object
        """
        return self._charge_id

    @charge_id.setter
    def charge_id(self, charge_id):
        """Sets the charge_id of this InvoiceLineItem.


        :param charge_id: The charge_id of this InvoiceLineItem.  # noqa: E501
        :type: object
        """
        if charge_id is None:
            raise ValueError("Invalid value for `charge_id`, must not be `None`")  # noqa: E501

        self._charge_id = charge_id

    @property
    def purchase_order_line_item_number(self):
        """Gets the purchase_order_line_item_number of this InvoiceLineItem.  # noqa: E501


        :return: The purchase_order_line_item_number of this InvoiceLineItem.  # noqa: E501
        :rtype: object
        """
        return self._purchase_order_line_item_number

    @purchase_order_line_item_number.setter
    def purchase_order_line_item_number(self, purchase_order_line_item_number):
        """Sets the purchase_order_line_item_number of this InvoiceLineItem.


        :param purchase_order_line_item_number: The purchase_order_line_item_number of this InvoiceLineItem.  # noqa: E501
        :type: object
        """
        if purchase_order_line_item_number is None:
            raise ValueError("Invalid value for `purchase_order_line_item_number`, must not be `None`")  # noqa: E501

        self._purchase_order_line_item_number = purchase_order_line_item_number

    @property
    def ordered_quantity(self):
        """Gets the ordered_quantity of this InvoiceLineItem.  # noqa: E501


        :return: The ordered_quantity of this InvoiceLineItem.  # noqa: E501
        :rtype: object
        """
        return self._ordered_quantity

    @ordered_quantity.setter
    def ordered_quantity(self, ordered_quantity):
        """Sets the ordered_quantity of this InvoiceLineItem.


        :param ordered_quantity: The ordered_quantity of this InvoiceLineItem.  # noqa: E501
        :type: object
        """
        if ordered_quantity is None:
            raise ValueError("Invalid value for `ordered_quantity`, must not be `None`")  # noqa: E501

        self._ordered_quantity = ordered_quantity

    @property
    def invoice_quantity(self):
        """Gets the invoice_quantity of this InvoiceLineItem.  # noqa: E501


        :return: The invoice_quantity of this InvoiceLineItem.  # noqa: E501
        :rtype: object
        """
        return self._invoice_quantity

    @invoice_quantity.setter
    def invoice_quantity(self, invoice_quantity):
        """Sets the invoice_quantity of this InvoiceLineItem.


        :param invoice_quantity: The invoice_quantity of this InvoiceLineItem.  # noqa: E501
        :type: object
        """
        if invoice_quantity is None:
            raise ValueError("Invalid value for `invoice_quantity`, must not be `None`")  # noqa: E501

        self._invoice_quantity = invoice_quantity

    @property
    def back_ordered_quantity(self):
        """Gets the back_ordered_quantity of this InvoiceLineItem.  # noqa: E501


        :return: The back_ordered_quantity of this InvoiceLineItem.  # noqa: E501
        :rtype: object
        """
        return self._back_ordered_quantity

    @back_ordered_quantity.setter
    def back_ordered_quantity(self, back_ordered_quantity):
        """Sets the back_ordered_quantity of this InvoiceLineItem.


        :param back_ordered_quantity: The back_ordered_quantity of this InvoiceLineItem.  # noqa: E501
        :type: object
        """
        if back_ordered_quantity is None:
            raise ValueError("Invalid value for `back_ordered_quantity`, must not be `None`")  # noqa: E501

        self._back_ordered_quantity = back_ordered_quantity

    @property
    def quantity_uom(self):
        """Gets the quantity_uom of this InvoiceLineItem.  # noqa: E501


        :return: The quantity_uom of this InvoiceLineItem.  # noqa: E501
        :rtype: object
        """
        return self._quantity_uom

    @quantity_uom.setter
    def quantity_uom(self, quantity_uom):
        """Sets the quantity_uom of this InvoiceLineItem.


        :param quantity_uom: The quantity_uom of this InvoiceLineItem.  # noqa: E501
        :type: object
        """
        if quantity_uom is None:
            raise ValueError("Invalid value for `quantity_uom`, must not be `None`")  # noqa: E501

        self._quantity_uom = quantity_uom

    @property
    def line_item_description(self):
        """Gets the line_item_description of this InvoiceLineItem.  # noqa: E501


        :return: The line_item_description of this InvoiceLineItem.  # noqa: E501
        :rtype: object
        """
        return self._line_item_description

    @line_item_description.setter
    def line_item_description(self, line_item_description):
        """Sets the line_item_description of this InvoiceLineItem.


        :param line_item_description: The line_item_description of this InvoiceLineItem.  # noqa: E501
        :type: object
        """
        if line_item_description is None:
            raise ValueError("Invalid value for `line_item_description`, must not be `None`")  # noqa: E501

        self._line_item_description = line_item_description

    @property
    def unit_price(self):
        """Gets the unit_price of this InvoiceLineItem.  # noqa: E501


        :return: The unit_price of this InvoiceLineItem.  # noqa: E501
        :rtype: object
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this InvoiceLineItem.


        :param unit_price: The unit_price of this InvoiceLineItem.  # noqa: E501
        :type: object
        """
        if unit_price is None:
            raise ValueError("Invalid value for `unit_price`, must not be `None`")  # noqa: E501

        self._unit_price = unit_price

    @property
    def discount_amount(self):
        """Gets the discount_amount of this InvoiceLineItem.  # noqa: E501


        :return: The discount_amount of this InvoiceLineItem.  # noqa: E501
        :rtype: object
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """Sets the discount_amount of this InvoiceLineItem.


        :param discount_amount: The discount_amount of this InvoiceLineItem.  # noqa: E501
        :type: object
        """
        if discount_amount is None:
            raise ValueError("Invalid value for `discount_amount`, must not be `None`")  # noqa: E501

        self._discount_amount = discount_amount

    @property
    def extended_price(self):
        """Gets the extended_price of this InvoiceLineItem.  # noqa: E501


        :return: The extended_price of this InvoiceLineItem.  # noqa: E501
        :rtype: object
        """
        return self._extended_price

    @extended_price.setter
    def extended_price(self, extended_price):
        """Sets the extended_price of this InvoiceLineItem.


        :param extended_price: The extended_price of this InvoiceLineItem.  # noqa: E501
        :type: object
        """
        if extended_price is None:
            raise ValueError("Invalid value for `extended_price`, must not be `None`")  # noqa: E501

        self._extended_price = extended_price

    @property
    def distributor_product_id(self):
        """Gets the distributor_product_id of this InvoiceLineItem.  # noqa: E501


        :return: The distributor_product_id of this InvoiceLineItem.  # noqa: E501
        :rtype: object
        """
        return self._distributor_product_id

    @distributor_product_id.setter
    def distributor_product_id(self, distributor_product_id):
        """Sets the distributor_product_id of this InvoiceLineItem.


        :param distributor_product_id: The distributor_product_id of this InvoiceLineItem.  # noqa: E501
        :type: object
        """
        if distributor_product_id is None:
            raise ValueError("Invalid value for `distributor_product_id`, must not be `None`")  # noqa: E501

        self._distributor_product_id = distributor_product_id

    @property
    def distributor_part_id(self):
        """Gets the distributor_part_id of this InvoiceLineItem.  # noqa: E501


        :return: The distributor_part_id of this InvoiceLineItem.  # noqa: E501
        :rtype: object
        """
        return self._distributor_part_id

    @distributor_part_id.setter
    def distributor_part_id(self, distributor_part_id):
        """Sets the distributor_part_id of this InvoiceLineItem.


        :param distributor_part_id: The distributor_part_id of this InvoiceLineItem.  # noqa: E501
        :type: object
        """
        if distributor_part_id is None:
            raise ValueError("Invalid value for `distributor_part_id`, must not be `None`")  # noqa: E501

        self._distributor_part_id = distributor_part_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvoiceLineItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceLineItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
