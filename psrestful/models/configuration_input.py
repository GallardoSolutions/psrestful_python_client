# coding: utf-8

"""
    PS RESTful Service API

    A proxy service for PromoStandards SOAP to a REST API  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConfigurationInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reference_number': 'object',
        'reference_number_type': 'object',
        'pre_production_proof': 'object',
        'charge_array': 'object',
        'location_array': 'object'
    }

    attribute_map = {
        'reference_number': 'referenceNumber',
        'reference_number_type': 'referenceNumberType',
        'pre_production_proof': 'preProductionProof',
        'charge_array': 'ChargeArray',
        'location_array': 'LocationArray'
    }

    def __init__(self, reference_number=None, reference_number_type=None, pre_production_proof=None, charge_array=None, location_array=None):  # noqa: E501
        """ConfigurationInput - a model defined in Swagger"""  # noqa: E501
        self._reference_number = None
        self._reference_number_type = None
        self._pre_production_proof = None
        self._charge_array = None
        self._location_array = None
        self.discriminator = None
        self.reference_number = reference_number
        self.reference_number_type = reference_number_type
        self.pre_production_proof = pre_production_proof
        self.charge_array = charge_array
        self.location_array = location_array

    @property
    def reference_number(self):
        """Gets the reference_number of this ConfigurationInput.  # noqa: E501

        The previous order number that this purchase order is referencing  # noqa: E501

        :return: The reference_number of this ConfigurationInput.  # noqa: E501
        :rtype: object
        """
        return self._reference_number

    @reference_number.setter
    def reference_number(self, reference_number):
        """Sets the reference_number of this ConfigurationInput.

        The previous order number that this purchase order is referencing  # noqa: E501

        :param reference_number: The reference_number of this ConfigurationInput.  # noqa: E501
        :type: object
        """
        if reference_number is None:
            raise ValueError("Invalid value for `reference_number`, must not be `None`")  # noqa: E501

        self._reference_number = reference_number

    @property
    def reference_number_type(self):
        """Gets the reference_number_type of this ConfigurationInput.  # noqa: E501

        The type of the prior order reference  # noqa: E501

        :return: The reference_number_type of this ConfigurationInput.  # noqa: E501
        :rtype: object
        """
        return self._reference_number_type

    @reference_number_type.setter
    def reference_number_type(self, reference_number_type):
        """Sets the reference_number_type of this ConfigurationInput.

        The type of the prior order reference  # noqa: E501

        :param reference_number_type: The reference_number_type of this ConfigurationInput.  # noqa: E501
        :type: object
        """
        if reference_number_type is None:
            raise ValueError("Invalid value for `reference_number_type`, must not be `None`")  # noqa: E501

        self._reference_number_type = reference_number_type

    @property
    def pre_production_proof(self):
        """Gets the pre_production_proof of this ConfigurationInput.  # noqa: E501

        Indicates that this line item is for a pre-production proof  # noqa: E501

        :return: The pre_production_proof of this ConfigurationInput.  # noqa: E501
        :rtype: object
        """
        return self._pre_production_proof

    @pre_production_proof.setter
    def pre_production_proof(self, pre_production_proof):
        """Sets the pre_production_proof of this ConfigurationInput.

        Indicates that this line item is for a pre-production proof  # noqa: E501

        :param pre_production_proof: The pre_production_proof of this ConfigurationInput.  # noqa: E501
        :type: object
        """
        if pre_production_proof is None:
            raise ValueError("Invalid value for `pre_production_proof`, must not be `None`")  # noqa: E501

        self._pre_production_proof = pre_production_proof

    @property
    def charge_array(self):
        """Gets the charge_array of this ConfigurationInput.  # noqa: E501


        :return: The charge_array of this ConfigurationInput.  # noqa: E501
        :rtype: object
        """
        return self._charge_array

    @charge_array.setter
    def charge_array(self, charge_array):
        """Sets the charge_array of this ConfigurationInput.


        :param charge_array: The charge_array of this ConfigurationInput.  # noqa: E501
        :type: object
        """
        if charge_array is None:
            raise ValueError("Invalid value for `charge_array`, must not be `None`")  # noqa: E501

        self._charge_array = charge_array

    @property
    def location_array(self):
        """Gets the location_array of this ConfigurationInput.  # noqa: E501


        :return: The location_array of this ConfigurationInput.  # noqa: E501
        :rtype: object
        """
        return self._location_array

    @location_array.setter
    def location_array(self, location_array):
        """Sets the location_array of this ConfigurationInput.


        :param location_array: The location_array of this ConfigurationInput.  # noqa: E501
        :type: object
        """
        if location_array is None:
            raise ValueError("Invalid value for `location_array`, must not be `None`")  # noqa: E501

        self._location_array = location_array

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigurationInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigurationInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
