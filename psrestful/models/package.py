# coding: utf-8

"""
    PS RESTful Service API

    A proxy service for PromoStandards SOAP to a REST API  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Package(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'object',
        'tracking_number': 'object',
        'shipment_date': 'object',
        'dim_uom': 'object',
        'length': 'object',
        'width': 'object',
        'height': 'object',
        'weight_uom': 'object',
        'weight': 'object',
        'carrier': 'object',
        'shipment_method': 'object',
        'shipping_account': 'object',
        'shipment_terms': 'object',
        'item_array': 'object'
    }

    attribute_map = {
        'id': 'id',
        'tracking_number': 'trackingNumber',
        'shipment_date': 'shipmentDate',
        'dim_uom': 'dimUOM',
        'length': 'length',
        'width': 'width',
        'height': 'height',
        'weight_uom': 'weightUOM',
        'weight': 'weight',
        'carrier': 'carrier',
        'shipment_method': 'shipmentMethod',
        'shipping_account': 'shippingAccount',
        'shipment_terms': 'shipmentTerms',
        'item_array': 'ItemArray'
    }

    def __init__(self, id=None, tracking_number=None, shipment_date=None, dim_uom=None, length=None, width=None, height=None, weight_uom=None, weight=None, carrier=None, shipment_method=None, shipping_account=None, shipment_terms=None, item_array=None):  # noqa: E501
        """Package - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._tracking_number = None
        self._shipment_date = None
        self._dim_uom = None
        self._length = None
        self._width = None
        self._height = None
        self._weight_uom = None
        self._weight = None
        self._carrier = None
        self._shipment_method = None
        self._shipping_account = None
        self._shipment_terms = None
        self._item_array = None
        self.discriminator = None
        self.id = id
        self.tracking_number = tracking_number
        self.shipment_date = shipment_date
        self.dim_uom = dim_uom
        self.length = length
        self.width = width
        self.height = height
        self.weight_uom = weight_uom
        self.weight = weight
        self.carrier = carrier
        self.shipment_method = shipment_method
        self.shipping_account = shipping_account
        self.shipment_terms = shipment_terms
        self.item_array = item_array

    @property
    def id(self):
        """Gets the id of this Package.  # noqa: E501


        :return: The id of this Package.  # noqa: E501
        :rtype: object
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Package.


        :param id: The id of this Package.  # noqa: E501
        :type: object
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def tracking_number(self):
        """Gets the tracking_number of this Package.  # noqa: E501


        :return: The tracking_number of this Package.  # noqa: E501
        :rtype: object
        """
        return self._tracking_number

    @tracking_number.setter
    def tracking_number(self, tracking_number):
        """Sets the tracking_number of this Package.


        :param tracking_number: The tracking_number of this Package.  # noqa: E501
        :type: object
        """
        if tracking_number is None:
            raise ValueError("Invalid value for `tracking_number`, must not be `None`")  # noqa: E501

        self._tracking_number = tracking_number

    @property
    def shipment_date(self):
        """Gets the shipment_date of this Package.  # noqa: E501


        :return: The shipment_date of this Package.  # noqa: E501
        :rtype: object
        """
        return self._shipment_date

    @shipment_date.setter
    def shipment_date(self, shipment_date):
        """Sets the shipment_date of this Package.


        :param shipment_date: The shipment_date of this Package.  # noqa: E501
        :type: object
        """
        if shipment_date is None:
            raise ValueError("Invalid value for `shipment_date`, must not be `None`")  # noqa: E501

        self._shipment_date = shipment_date

    @property
    def dim_uom(self):
        """Gets the dim_uom of this Package.  # noqa: E501


        :return: The dim_uom of this Package.  # noqa: E501
        :rtype: object
        """
        return self._dim_uom

    @dim_uom.setter
    def dim_uom(self, dim_uom):
        """Sets the dim_uom of this Package.


        :param dim_uom: The dim_uom of this Package.  # noqa: E501
        :type: object
        """
        if dim_uom is None:
            raise ValueError("Invalid value for `dim_uom`, must not be `None`")  # noqa: E501

        self._dim_uom = dim_uom

    @property
    def length(self):
        """Gets the length of this Package.  # noqa: E501


        :return: The length of this Package.  # noqa: E501
        :rtype: object
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this Package.


        :param length: The length of this Package.  # noqa: E501
        :type: object
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")  # noqa: E501

        self._length = length

    @property
    def width(self):
        """Gets the width of this Package.  # noqa: E501


        :return: The width of this Package.  # noqa: E501
        :rtype: object
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Package.


        :param width: The width of this Package.  # noqa: E501
        :type: object
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")  # noqa: E501

        self._width = width

    @property
    def height(self):
        """Gets the height of this Package.  # noqa: E501


        :return: The height of this Package.  # noqa: E501
        :rtype: object
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Package.


        :param height: The height of this Package.  # noqa: E501
        :type: object
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501

        self._height = height

    @property
    def weight_uom(self):
        """Gets the weight_uom of this Package.  # noqa: E501


        :return: The weight_uom of this Package.  # noqa: E501
        :rtype: object
        """
        return self._weight_uom

    @weight_uom.setter
    def weight_uom(self, weight_uom):
        """Sets the weight_uom of this Package.


        :param weight_uom: The weight_uom of this Package.  # noqa: E501
        :type: object
        """
        if weight_uom is None:
            raise ValueError("Invalid value for `weight_uom`, must not be `None`")  # noqa: E501

        self._weight_uom = weight_uom

    @property
    def weight(self):
        """Gets the weight of this Package.  # noqa: E501


        :return: The weight of this Package.  # noqa: E501
        :rtype: object
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Package.


        :param weight: The weight of this Package.  # noqa: E501
        :type: object
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")  # noqa: E501

        self._weight = weight

    @property
    def carrier(self):
        """Gets the carrier of this Package.  # noqa: E501


        :return: The carrier of this Package.  # noqa: E501
        :rtype: object
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier):
        """Sets the carrier of this Package.


        :param carrier: The carrier of this Package.  # noqa: E501
        :type: object
        """
        if carrier is None:
            raise ValueError("Invalid value for `carrier`, must not be `None`")  # noqa: E501

        self._carrier = carrier

    @property
    def shipment_method(self):
        """Gets the shipment_method of this Package.  # noqa: E501


        :return: The shipment_method of this Package.  # noqa: E501
        :rtype: object
        """
        return self._shipment_method

    @shipment_method.setter
    def shipment_method(self, shipment_method):
        """Sets the shipment_method of this Package.


        :param shipment_method: The shipment_method of this Package.  # noqa: E501
        :type: object
        """
        if shipment_method is None:
            raise ValueError("Invalid value for `shipment_method`, must not be `None`")  # noqa: E501

        self._shipment_method = shipment_method

    @property
    def shipping_account(self):
        """Gets the shipping_account of this Package.  # noqa: E501


        :return: The shipping_account of this Package.  # noqa: E501
        :rtype: object
        """
        return self._shipping_account

    @shipping_account.setter
    def shipping_account(self, shipping_account):
        """Sets the shipping_account of this Package.


        :param shipping_account: The shipping_account of this Package.  # noqa: E501
        :type: object
        """
        if shipping_account is None:
            raise ValueError("Invalid value for `shipping_account`, must not be `None`")  # noqa: E501

        self._shipping_account = shipping_account

    @property
    def shipment_terms(self):
        """Gets the shipment_terms of this Package.  # noqa: E501


        :return: The shipment_terms of this Package.  # noqa: E501
        :rtype: object
        """
        return self._shipment_terms

    @shipment_terms.setter
    def shipment_terms(self, shipment_terms):
        """Sets the shipment_terms of this Package.


        :param shipment_terms: The shipment_terms of this Package.  # noqa: E501
        :type: object
        """
        if shipment_terms is None:
            raise ValueError("Invalid value for `shipment_terms`, must not be `None`")  # noqa: E501

        self._shipment_terms = shipment_terms

    @property
    def item_array(self):
        """Gets the item_array of this Package.  # noqa: E501


        :return: The item_array of this Package.  # noqa: E501
        :rtype: object
        """
        return self._item_array

    @item_array.setter
    def item_array(self, item_array):
        """Sets the item_array of this Package.


        :param item_array: The item_array of this Package.  # noqa: E501
        :type: object
        """
        if item_array is None:
            raise ValueError("Invalid value for `item_array`, must not be `None`")  # noqa: E501

        self._item_array = item_array

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Package, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Package):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
