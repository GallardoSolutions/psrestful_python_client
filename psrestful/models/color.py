# coding: utf-8

"""
    PS RESTful Service API

    A proxy service for PromoStandards SOAP to a REST API  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Color(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'color_name': 'object',
        'hex': 'object',
        'approximate_pms': 'object',
        'standard_color_name': 'object'
    }

    attribute_map = {
        'color_name': 'colorName',
        'hex': 'hex',
        'approximate_pms': 'approximatePms',
        'standard_color_name': 'standardColorName'
    }

    def __init__(self, color_name=None, hex=None, approximate_pms=None, standard_color_name=None):  # noqa: E501
        """Color - a model defined in Swagger"""  # noqa: E501
        self._color_name = None
        self._hex = None
        self._approximate_pms = None
        self._standard_color_name = None
        self.discriminator = None
        self.color_name = color_name
        if hex is not None:
            self.hex = hex
        if approximate_pms is not None:
            self.approximate_pms = approximate_pms
        if standard_color_name is not None:
            self.standard_color_name = standard_color_name

    @property
    def color_name(self):
        """Gets the color_name of this Color.  # noqa: E501


        :return: The color_name of this Color.  # noqa: E501
        :rtype: object
        """
        return self._color_name

    @color_name.setter
    def color_name(self, color_name):
        """Sets the color_name of this Color.


        :param color_name: The color_name of this Color.  # noqa: E501
        :type: object
        """
        if color_name is None:
            raise ValueError("Invalid value for `color_name`, must not be `None`")  # noqa: E501

        self._color_name = color_name

    @property
    def hex(self):
        """Gets the hex of this Color.  # noqa: E501


        :return: The hex of this Color.  # noqa: E501
        :rtype: object
        """
        return self._hex

    @hex.setter
    def hex(self, hex):
        """Sets the hex of this Color.


        :param hex: The hex of this Color.  # noqa: E501
        :type: object
        """

        self._hex = hex

    @property
    def approximate_pms(self):
        """Gets the approximate_pms of this Color.  # noqa: E501


        :return: The approximate_pms of this Color.  # noqa: E501
        :rtype: object
        """
        return self._approximate_pms

    @approximate_pms.setter
    def approximate_pms(self, approximate_pms):
        """Sets the approximate_pms of this Color.


        :param approximate_pms: The approximate_pms of this Color.  # noqa: E501
        :type: object
        """

        self._approximate_pms = approximate_pms

    @property
    def standard_color_name(self):
        """Gets the standard_color_name of this Color.  # noqa: E501


        :return: The standard_color_name of this Color.  # noqa: E501
        :rtype: object
        """
        return self._standard_color_name

    @standard_color_name.setter
    def standard_color_name(self, standard_color_name):
        """Sets the standard_color_name of this Color.


        :param standard_color_name: The standard_color_name of this Color.  # noqa: E501
        :type: object
        """

        self._standard_color_name = standard_color_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Color, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Color):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
