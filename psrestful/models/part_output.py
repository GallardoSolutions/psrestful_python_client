# coding: utf-8

"""
    PS RESTful Service API

    A proxy service for PromoStandards SOAP to a REST API  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PartOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'part_id': 'object',
        'part_description': 'object',
        'part_price_array': 'object',
        'part_group': 'object',
        'next_part_group': 'object',
        'part_group_required': 'object',
        'part_group_description': 'object',
        'ratio': 'object',
        'default_part': 'object',
        'location_id_array': 'object'
    }

    attribute_map = {
        'part_id': 'partId',
        'part_description': 'partDescription',
        'part_price_array': 'PartPriceArray',
        'part_group': 'partGroup',
        'next_part_group': 'nextPartGroup',
        'part_group_required': 'partGroupRequired',
        'part_group_description': 'partGroupDescription',
        'ratio': 'ratio',
        'default_part': 'defaultPart',
        'location_id_array': 'LocationIdArray'
    }

    def __init__(self, part_id=None, part_description=None, part_price_array=None, part_group=None, next_part_group=None, part_group_required=None, part_group_description=None, ratio=None, default_part=None, location_id_array=None):  # noqa: E501
        """PartOutput - a model defined in Swagger"""  # noqa: E501
        self._part_id = None
        self._part_description = None
        self._part_price_array = None
        self._part_group = None
        self._next_part_group = None
        self._part_group_required = None
        self._part_group_description = None
        self._ratio = None
        self._default_part = None
        self._location_id_array = None
        self.discriminator = None
        self.part_id = part_id
        self.part_description = part_description
        self.part_price_array = part_price_array
        self.part_group = part_group
        if next_part_group is not None:
            self.next_part_group = next_part_group
        self.part_group_required = part_group_required
        self.part_group_description = part_group_description
        self.ratio = ratio
        self.default_part = default_part
        self.location_id_array = location_id_array

    @property
    def part_id(self):
        """Gets the part_id of this PartOutput.  # noqa: E501


        :return: The part_id of this PartOutput.  # noqa: E501
        :rtype: object
        """
        return self._part_id

    @part_id.setter
    def part_id(self, part_id):
        """Sets the part_id of this PartOutput.


        :param part_id: The part_id of this PartOutput.  # noqa: E501
        :type: object
        """
        if part_id is None:
            raise ValueError("Invalid value for `part_id`, must not be `None`")  # noqa: E501

        self._part_id = part_id

    @property
    def part_description(self):
        """Gets the part_description of this PartOutput.  # noqa: E501


        :return: The part_description of this PartOutput.  # noqa: E501
        :rtype: object
        """
        return self._part_description

    @part_description.setter
    def part_description(self, part_description):
        """Sets the part_description of this PartOutput.


        :param part_description: The part_description of this PartOutput.  # noqa: E501
        :type: object
        """
        if part_description is None:
            raise ValueError("Invalid value for `part_description`, must not be `None`")  # noqa: E501

        self._part_description = part_description

    @property
    def part_price_array(self):
        """Gets the part_price_array of this PartOutput.  # noqa: E501


        :return: The part_price_array of this PartOutput.  # noqa: E501
        :rtype: object
        """
        return self._part_price_array

    @part_price_array.setter
    def part_price_array(self, part_price_array):
        """Sets the part_price_array of this PartOutput.


        :param part_price_array: The part_price_array of this PartOutput.  # noqa: E501
        :type: object
        """
        if part_price_array is None:
            raise ValueError("Invalid value for `part_price_array`, must not be `None`")  # noqa: E501

        self._part_price_array = part_price_array

    @property
    def part_group(self):
        """Gets the part_group of this PartOutput.  # noqa: E501

        A numeric identifier grouping mutually exclusive parts together. When configuring data, always start with part group “1”  # noqa: E501

        :return: The part_group of this PartOutput.  # noqa: E501
        :rtype: object
        """
        return self._part_group

    @part_group.setter
    def part_group(self, part_group):
        """Sets the part_group of this PartOutput.

        A numeric identifier grouping mutually exclusive parts together. When configuring data, always start with part group “1”  # noqa: E501

        :param part_group: The part_group of this PartOutput.  # noqa: E501
        :type: object
        """
        if part_group is None:
            raise ValueError("Invalid value for `part_group`, must not be `None`")  # noqa: E501

        self._part_group = part_group

    @property
    def next_part_group(self):
        """Gets the next_part_group of this PartOutput.  # noqa: E501

        The next mutually exclusive partGroup to complete configuration ofthe product  # noqa: E501

        :return: The next_part_group of this PartOutput.  # noqa: E501
        :rtype: object
        """
        return self._next_part_group

    @next_part_group.setter
    def next_part_group(self, next_part_group):
        """Sets the next_part_group of this PartOutput.

        The next mutually exclusive partGroup to complete configuration ofthe product  # noqa: E501

        :param next_part_group: The next_part_group of this PartOutput.  # noqa: E501
        :type: object
        """

        self._next_part_group = next_part_group

    @property
    def part_group_required(self):
        """Gets the part_group_required of this PartOutput.  # noqa: E501

        A boolean value specifying if this partGroup is required for the product configuration. If set to TRUE, a selection in the partGroup is required for ordering  # noqa: E501

        :return: The part_group_required of this PartOutput.  # noqa: E501
        :rtype: object
        """
        return self._part_group_required

    @part_group_required.setter
    def part_group_required(self, part_group_required):
        """Sets the part_group_required of this PartOutput.

        A boolean value specifying if this partGroup is required for the product configuration. If set to TRUE, a selection in the partGroup is required for ordering  # noqa: E501

        :param part_group_required: The part_group_required of this PartOutput.  # noqa: E501
        :type: object
        """
        if part_group_required is None:
            raise ValueError("Invalid value for `part_group_required`, must not be `None`")  # noqa: E501

        self._part_group_required = part_group_required

    @property
    def part_group_description(self):
        """Gets the part_group_description of this PartOutput.  # noqa: E501

        A description of the partGroup: Optional Lid`, `Straw  # noqa: E501

        :return: The part_group_description of this PartOutput.  # noqa: E501
        :rtype: object
        """
        return self._part_group_description

    @part_group_description.setter
    def part_group_description(self, part_group_description):
        """Sets the part_group_description of this PartOutput.

        A description of the partGroup: Optional Lid`, `Straw  # noqa: E501

        :param part_group_description: The part_group_description of this PartOutput.  # noqa: E501
        :type: object
        """
        if part_group_description is None:
            raise ValueError("Invalid value for `part_group_description`, must not be `None`")  # noqa: E501

        self._part_group_description = part_group_description

    @property
    def ratio(self):
        """Gets the ratio of this PartOutput.  # noqa: E501

        Describes how the amount of partIds that need to be added to the order based on the number of products ordered  # noqa: E501

        :return: The ratio of this PartOutput.  # noqa: E501
        :rtype: object
        """
        return self._ratio

    @ratio.setter
    def ratio(self, ratio):
        """Sets the ratio of this PartOutput.

        Describes how the amount of partIds that need to be added to the order based on the number of products ordered  # noqa: E501

        :param ratio: The ratio of this PartOutput.  # noqa: E501
        :type: object
        """
        if ratio is None:
            raise ValueError("Invalid value for `ratio`, must not be `None`")  # noqa: E501

        self._ratio = ratio

    @property
    def default_part(self):
        """Gets the default_part of this PartOutput.  # noqa: E501

        This part is included in the “Basic Pricing Configuration” service price. This field is optional, but highly encouraged  # noqa: E501

        :return: The default_part of this PartOutput.  # noqa: E501
        :rtype: object
        """
        return self._default_part

    @default_part.setter
    def default_part(self, default_part):
        """Sets the default_part of this PartOutput.

        This part is included in the “Basic Pricing Configuration” service price. This field is optional, but highly encouraged  # noqa: E501

        :param default_part: The default_part of this PartOutput.  # noqa: E501
        :type: object
        """
        if default_part is None:
            raise ValueError("Invalid value for `default_part`, must not be `None`")  # noqa: E501

        self._default_part = default_part

    @property
    def location_id_array(self):
        """Gets the location_id_array of this PartOutput.  # noqa: E501


        :return: The location_id_array of this PartOutput.  # noqa: E501
        :rtype: object
        """
        return self._location_id_array

    @location_id_array.setter
    def location_id_array(self, location_id_array):
        """Sets the location_id_array of this PartOutput.


        :param location_id_array: The location_id_array of this PartOutput.  # noqa: E501
        :type: object
        """
        if location_id_array is None:
            raise ValueError("Invalid value for `location_id_array`, must not be `None`")  # noqa: E501

        self._location_id_array = location_id_array

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PartOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartOutput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
