# coding: utf-8

"""
    PS RESTful Service API

    A proxy service for PromoStandards SOAP to a REST API  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ArtworkFile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_name': 'object',
        'file_location': 'object',
        'transport_mechanism': 'object',
        'artwork_type': 'ArtworkType'
    }

    attribute_map = {
        'file_name': 'fileName',
        'file_location': 'fileLocation',
        'transport_mechanism': 'transportMechanism',
        'artwork_type': 'artworkType'
    }

    def __init__(self, file_name=None, file_location=None, transport_mechanism=None, artwork_type=None):  # noqa: E501
        """ArtworkFile - a model defined in Swagger"""  # noqa: E501
        self._file_name = None
        self._file_location = None
        self._transport_mechanism = None
        self._artwork_type = None
        self.discriminator = None
        self.file_name = file_name
        self.file_location = file_location
        self.transport_mechanism = transport_mechanism
        self.artwork_type = artwork_type

    @property
    def file_name(self):
        """Gets the file_name of this ArtworkFile.  # noqa: E501


        :return: The file_name of this ArtworkFile.  # noqa: E501
        :rtype: object
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this ArtworkFile.


        :param file_name: The file_name of this ArtworkFile.  # noqa: E501
        :type: object
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")  # noqa: E501

        self._file_name = file_name

    @property
    def file_location(self):
        """Gets the file_location of this ArtworkFile.  # noqa: E501


        :return: The file_location of this ArtworkFile.  # noqa: E501
        :rtype: object
        """
        return self._file_location

    @file_location.setter
    def file_location(self, file_location):
        """Sets the file_location of this ArtworkFile.


        :param file_location: The file_location of this ArtworkFile.  # noqa: E501
        :type: object
        """
        if file_location is None:
            raise ValueError("Invalid value for `file_location`, must not be `None`")  # noqa: E501

        self._file_location = file_location

    @property
    def transport_mechanism(self):
        """Gets the transport_mechanism of this ArtworkFile.  # noqa: E501


        :return: The transport_mechanism of this ArtworkFile.  # noqa: E501
        :rtype: object
        """
        return self._transport_mechanism

    @transport_mechanism.setter
    def transport_mechanism(self, transport_mechanism):
        """Sets the transport_mechanism of this ArtworkFile.


        :param transport_mechanism: The transport_mechanism of this ArtworkFile.  # noqa: E501
        :type: object
        """
        if transport_mechanism is None:
            raise ValueError("Invalid value for `transport_mechanism`, must not be `None`")  # noqa: E501

        self._transport_mechanism = transport_mechanism

    @property
    def artwork_type(self):
        """Gets the artwork_type of this ArtworkFile.  # noqa: E501


        :return: The artwork_type of this ArtworkFile.  # noqa: E501
        :rtype: ArtworkType
        """
        return self._artwork_type

    @artwork_type.setter
    def artwork_type(self, artwork_type):
        """Sets the artwork_type of this ArtworkFile.


        :param artwork_type: The artwork_type of this ArtworkFile.  # noqa: E501
        :type: ArtworkType
        """
        if artwork_type is None:
            raise ValueError("Invalid value for `artwork_type`, must not be `None`")  # noqa: E501

        self._artwork_type = artwork_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ArtworkFile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArtworkFile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
