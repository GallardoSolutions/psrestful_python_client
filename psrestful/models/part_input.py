# coding: utf-8

"""
    PS RESTful Service API

    A proxy service for PromoStandards SOAP to a REST API  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PartInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'part_group': 'object',
        'part_id': 'object',
        'quantity': 'QuantityInput',
        'customer_part_id': 'object',
        'customer_supplied': 'object',
        'description': 'object',
        'location_link_id': 'object',
        'unit_price': 'object',
        'extended_price': 'object',
        'shipment_link_array': 'object'
    }

    attribute_map = {
        'part_group': 'partGroup',
        'part_id': 'partId',
        'quantity': 'Quantity',
        'customer_part_id': 'customerPartId',
        'customer_supplied': 'customerSupplied',
        'description': 'description',
        'location_link_id': 'locationLinkId',
        'unit_price': 'unitPrice',
        'extended_price': 'extendedPrice',
        'shipment_link_array': 'ShipmentLinkArray'
    }

    def __init__(self, part_group=None, part_id=None, quantity=None, customer_part_id=None, customer_supplied=None, description=None, location_link_id=None, unit_price=None, extended_price=None, shipment_link_array=None):  # noqa: E501
        """PartInput - a model defined in Swagger"""  # noqa: E501
        self._part_group = None
        self._part_id = None
        self._quantity = None
        self._customer_part_id = None
        self._customer_supplied = None
        self._description = None
        self._location_link_id = None
        self._unit_price = None
        self._extended_price = None
        self._shipment_link_array = None
        self.discriminator = None
        self.part_group = part_group
        self.part_id = part_id
        self.quantity = quantity
        self.customer_part_id = customer_part_id
        self.customer_supplied = customer_supplied
        self.description = description
        self.location_link_id = location_link_id
        self.unit_price = unit_price
        self.extended_price = extended_price
        self.shipment_link_array = shipment_link_array

    @property
    def part_group(self):
        """Gets the part_group of this PartInput.  # noqa: E501

        An identifier that links common line item parts together  # noqa: E501

        :return: The part_group of this PartInput.  # noqa: E501
        :rtype: object
        """
        return self._part_group

    @part_group.setter
    def part_group(self, part_group):
        """Sets the part_group of this PartInput.

        An identifier that links common line item parts together  # noqa: E501

        :param part_group: The part_group of this PartInput.  # noqa: E501
        :type: object
        """
        if part_group is None:
            raise ValueError("Invalid value for `part_group`, must not be `None`")  # noqa: E501

        self._part_group = part_group

    @property
    def part_id(self):
        """Gets the part_id of this PartInput.  # noqa: E501

        The part Id from the supplier’s PromoStandards Product Pricing and Configuration service  # noqa: E501

        :return: The part_id of this PartInput.  # noqa: E501
        :rtype: object
        """
        return self._part_id

    @part_id.setter
    def part_id(self, part_id):
        """Sets the part_id of this PartInput.

        The part Id from the supplier’s PromoStandards Product Pricing and Configuration service  # noqa: E501

        :param part_id: The part_id of this PartInput.  # noqa: E501
        :type: object
        """
        if part_id is None:
            raise ValueError("Invalid value for `part_id`, must not be `None`")  # noqa: E501

        self._part_id = part_id

    @property
    def quantity(self):
        """Gets the quantity of this PartInput.  # noqa: E501


        :return: The quantity of this PartInput.  # noqa: E501
        :rtype: QuantityInput
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this PartInput.


        :param quantity: The quantity of this PartInput.  # noqa: E501
        :type: QuantityInput
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def customer_part_id(self):
        """Gets the customer_part_id of this PartInput.  # noqa: E501

        How the part is being represented to the distributor’s customer  # noqa: E501

        :return: The customer_part_id of this PartInput.  # noqa: E501
        :rtype: object
        """
        return self._customer_part_id

    @customer_part_id.setter
    def customer_part_id(self, customer_part_id):
        """Sets the customer_part_id of this PartInput.

        How the part is being represented to the distributor’s customer  # noqa: E501

        :param customer_part_id: The customer_part_id of this PartInput.  # noqa: E501
        :type: object
        """
        if customer_part_id is None:
            raise ValueError("Invalid value for `customer_part_id`, must not be `None`")  # noqa: E501

        self._customer_part_id = customer_part_id

    @property
    def customer_supplied(self):
        """Gets the customer_supplied of this PartInput.  # noqa: E501

        The part will be supplied by the customer or another entity other than the supplier  # noqa: E501

        :return: The customer_supplied of this PartInput.  # noqa: E501
        :rtype: object
        """
        return self._customer_supplied

    @customer_supplied.setter
    def customer_supplied(self, customer_supplied):
        """Sets the customer_supplied of this PartInput.

        The part will be supplied by the customer or another entity other than the supplier  # noqa: E501

        :param customer_supplied: The customer_supplied of this PartInput.  # noqa: E501
        :type: object
        """
        if customer_supplied is None:
            raise ValueError("Invalid value for `customer_supplied`, must not be `None`")  # noqa: E501

        self._customer_supplied = customer_supplied

    @property
    def description(self):
        """Gets the description of this PartInput.  # noqa: E501

        The description from the supplier’s PromoStandards Product Pricing and Configuration service  # noqa: E501

        :return: The description of this PartInput.  # noqa: E501
        :rtype: object
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PartInput.

        The description from the supplier’s PromoStandards Product Pricing and Configuration service  # noqa: E501

        :param description: The description of this PartInput.  # noqa: E501
        :type: object
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def location_link_id(self):
        """Gets the location_link_id of this PartInput.  # noqa: E501

        An array of location link Ids.  This links the part to its configured locations  # noqa: E501

        :return: The location_link_id of this PartInput.  # noqa: E501
        :rtype: object
        """
        return self._location_link_id

    @location_link_id.setter
    def location_link_id(self, location_link_id):
        """Sets the location_link_id of this PartInput.

        An array of location link Ids.  This links the part to its configured locations  # noqa: E501

        :param location_link_id: The location_link_id of this PartInput.  # noqa: E501
        :type: object
        """
        if location_link_id is None:
            raise ValueError("Invalid value for `location_link_id`, must not be `None`")  # noqa: E501

        self._location_link_id = location_link_id

    @property
    def unit_price(self):
        """Gets the unit_price of this PartInput.  # noqa: E501


        :return: The unit_price of this PartInput.  # noqa: E501
        :rtype: object
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this PartInput.


        :param unit_price: The unit_price of this PartInput.  # noqa: E501
        :type: object
        """
        if unit_price is None:
            raise ValueError("Invalid value for `unit_price`, must not be `None`")  # noqa: E501

        self._unit_price = unit_price

    @property
    def extended_price(self):
        """Gets the extended_price of this PartInput.  # noqa: E501


        :return: The extended_price of this PartInput.  # noqa: E501
        :rtype: object
        """
        return self._extended_price

    @extended_price.setter
    def extended_price(self, extended_price):
        """Sets the extended_price of this PartInput.


        :param extended_price: The extended_price of this PartInput.  # noqa: E501
        :type: object
        """
        if extended_price is None:
            raise ValueError("Invalid value for `extended_price`, must not be `None`")  # noqa: E501

        self._extended_price = extended_price

    @property
    def shipment_link_array(self):
        """Gets the shipment_link_array of this PartInput.  # noqa: E501


        :return: The shipment_link_array of this PartInput.  # noqa: E501
        :rtype: object
        """
        return self._shipment_link_array

    @shipment_link_array.setter
    def shipment_link_array(self, shipment_link_array):
        """Sets the shipment_link_array of this PartInput.


        :param shipment_link_array: The shipment_link_array of this PartInput.  # noqa: E501
        :type: object
        """
        if shipment_link_array is None:
            raise ValueError("Invalid value for `shipment_link_array`, must not be `None`")  # noqa: E501

        self._shipment_link_array = shipment_link_array

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PartInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
