# coding: utf-8

"""
    PS RESTful Service API

    A proxy service for PromoStandards SOAP to a REST API  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PartPrice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'min_quantity': 'object',
        'discount_code': 'object',
        'price': 'object',
        'price_uom': 'object',
        'price_effective_date': 'object',
        'price_expiry_date': 'object'
    }

    attribute_map = {
        'min_quantity': 'minQuantity',
        'discount_code': 'discountCode',
        'price': 'price',
        'price_uom': 'priceUom',
        'price_effective_date': 'priceEffectiveDate',
        'price_expiry_date': 'priceExpiryDate'
    }

    def __init__(self, min_quantity=None, discount_code=None, price=None, price_uom=None, price_effective_date=None, price_expiry_date=None):  # noqa: E501
        """PartPrice - a model defined in Swagger"""  # noqa: E501
        self._min_quantity = None
        self._discount_code = None
        self._price = None
        self._price_uom = None
        self._price_effective_date = None
        self._price_expiry_date = None
        self.discriminator = None
        self.min_quantity = min_quantity
        self.discount_code = discount_code
        self.price = price
        self.price_uom = price_uom
        self.price_effective_date = price_effective_date
        self.price_expiry_date = price_expiry_date

    @property
    def min_quantity(self):
        """Gets the min_quantity of this PartPrice.  # noqa: E501

        The minimum quantity for the price  # noqa: E501

        :return: The min_quantity of this PartPrice.  # noqa: E501
        :rtype: object
        """
        return self._min_quantity

    @min_quantity.setter
    def min_quantity(self, min_quantity):
        """Sets the min_quantity of this PartPrice.

        The minimum quantity for the price  # noqa: E501

        :param min_quantity: The min_quantity of this PartPrice.  # noqa: E501
        :type: object
        """
        if min_quantity is None:
            raise ValueError("Invalid value for `min_quantity`, must not be `None`")  # noqa: E501

        self._min_quantity = min_quantity

    @property
    def discount_code(self):
        """Gets the discount_code of this PartPrice.  # noqa: E501

        The industry discount code associated with the price.  # noqa: E501

        :return: The discount_code of this PartPrice.  # noqa: E501
        :rtype: object
        """
        return self._discount_code

    @discount_code.setter
    def discount_code(self, discount_code):
        """Sets the discount_code of this PartPrice.

        The industry discount code associated with the price.  # noqa: E501

        :param discount_code: The discount_code of this PartPrice.  # noqa: E501
        :type: object
        """
        if discount_code is None:
            raise ValueError("Invalid value for `discount_code`, must not be `None`")  # noqa: E501

        self._discount_code = discount_code

    @property
    def price(self):
        """Gets the price of this PartPrice.  # noqa: E501

        The base price of the good without decoration  # noqa: E501

        :return: The price of this PartPrice.  # noqa: E501
        :rtype: object
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this PartPrice.

        The base price of the good without decoration  # noqa: E501

        :param price: The price of this PartPrice.  # noqa: E501
        :type: object
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def price_uom(self):
        """Gets the price_uom of this PartPrice.  # noqa: E501

        The unit of measure for the price  # noqa: E501

        :return: The price_uom of this PartPrice.  # noqa: E501
        :rtype: object
        """
        return self._price_uom

    @price_uom.setter
    def price_uom(self, price_uom):
        """Sets the price_uom of this PartPrice.

        The unit of measure for the price  # noqa: E501

        :param price_uom: The price_uom of this PartPrice.  # noqa: E501
        :type: object
        """
        if price_uom is None:
            raise ValueError("Invalid value for `price_uom`, must not be `None`")  # noqa: E501

        self._price_uom = price_uom

    @property
    def price_effective_date(self):
        """Gets the price_effective_date of this PartPrice.  # noqa: E501


        :return: The price_effective_date of this PartPrice.  # noqa: E501
        :rtype: object
        """
        return self._price_effective_date

    @price_effective_date.setter
    def price_effective_date(self, price_effective_date):
        """Sets the price_effective_date of this PartPrice.


        :param price_effective_date: The price_effective_date of this PartPrice.  # noqa: E501
        :type: object
        """
        if price_effective_date is None:
            raise ValueError("Invalid value for `price_effective_date`, must not be `None`")  # noqa: E501

        self._price_effective_date = price_effective_date

    @property
    def price_expiry_date(self):
        """Gets the price_expiry_date of this PartPrice.  # noqa: E501


        :return: The price_expiry_date of this PartPrice.  # noqa: E501
        :rtype: object
        """
        return self._price_expiry_date

    @price_expiry_date.setter
    def price_expiry_date(self, price_expiry_date):
        """Sets the price_expiry_date of this PartPrice.


        :param price_expiry_date: The price_expiry_date of this PartPrice.  # noqa: E501
        :type: object
        """
        if price_expiry_date is None:
            raise ValueError("Invalid value for `price_expiry_date`, must not be `None`")  # noqa: E501

        self._price_expiry_date = price_expiry_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PartPrice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartPrice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
