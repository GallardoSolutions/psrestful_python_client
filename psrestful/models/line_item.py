# coding: utf-8

"""
    PS RESTful Service API

    A proxy service for PromoStandards SOAP to a REST API  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LineItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'line_number': 'object',
        'description': 'object',
        'line_type': 'LineType',
        'quantity': 'object',
        'fob_id': 'object',
        'tolerance_details': 'ToleranceDetails',
        'allow_partial_shipments': 'object',
        'unit_price': 'object',
        'line_item_total': 'object',
        'requested_ship_date': 'object',
        'requested_in_hands_date': 'object',
        'reference_sales_quote': 'object',
        'program': 'object',
        'end_customer_sales_order': 'object',
        'product_id': 'object',
        'customer_product_id': 'object',
        'line_item_grouping_id': 'object',
        'part_array': 'object',
        'configuration': 'object'
    }

    attribute_map = {
        'line_number': 'lineNumber',
        'description': 'description',
        'line_type': 'lineType',
        'quantity': 'Quantity',
        'fob_id': 'fobId',
        'tolerance_details': 'ToleranceDetails',
        'allow_partial_shipments': 'allowPartialShipments',
        'unit_price': 'unitPrice',
        'line_item_total': 'lineItemTotal',
        'requested_ship_date': 'requestedShipDate',
        'requested_in_hands_date': 'requestedInHandsDate',
        'reference_sales_quote': 'referenceSalesQuote',
        'program': 'Program',
        'end_customer_sales_order': 'endCustomerSalesOrder',
        'product_id': 'productId',
        'customer_product_id': 'customerProductId',
        'line_item_grouping_id': 'lineItemGroupingId',
        'part_array': 'PartArray',
        'configuration': 'Configuration'
    }

    def __init__(self, line_number=None, description=None, line_type=None, quantity=None, fob_id=None, tolerance_details=None, allow_partial_shipments=None, unit_price=None, line_item_total=None, requested_ship_date=None, requested_in_hands_date=None, reference_sales_quote=None, program=None, end_customer_sales_order=None, product_id=None, customer_product_id=None, line_item_grouping_id=None, part_array=None, configuration=None):  # noqa: E501
        """LineItem - a model defined in Swagger"""  # noqa: E501
        self._line_number = None
        self._description = None
        self._line_type = None
        self._quantity = None
        self._fob_id = None
        self._tolerance_details = None
        self._allow_partial_shipments = None
        self._unit_price = None
        self._line_item_total = None
        self._requested_ship_date = None
        self._requested_in_hands_date = None
        self._reference_sales_quote = None
        self._program = None
        self._end_customer_sales_order = None
        self._product_id = None
        self._customer_product_id = None
        self._line_item_grouping_id = None
        self._part_array = None
        self._configuration = None
        self.discriminator = None
        self.line_number = line_number
        self.description = description
        self.line_type = line_type
        self.quantity = quantity
        self.fob_id = fob_id
        self.tolerance_details = tolerance_details
        self.allow_partial_shipments = allow_partial_shipments
        self.unit_price = unit_price
        self.line_item_total = line_item_total
        self.requested_ship_date = requested_ship_date
        self.requested_in_hands_date = requested_in_hands_date
        self.reference_sales_quote = reference_sales_quote
        self.program = program
        self.end_customer_sales_order = end_customer_sales_order
        self.product_id = product_id
        self.customer_product_id = customer_product_id
        self.line_item_grouping_id = line_item_grouping_id
        self.part_array = part_array
        self.configuration = configuration

    @property
    def line_number(self):
        """Gets the line_number of this LineItem.  # noqa: E501


        :return: The line_number of this LineItem.  # noqa: E501
        :rtype: object
        """
        return self._line_number

    @line_number.setter
    def line_number(self, line_number):
        """Sets the line_number of this LineItem.


        :param line_number: The line_number of this LineItem.  # noqa: E501
        :type: object
        """
        if line_number is None:
            raise ValueError("Invalid value for `line_number`, must not be `None`")  # noqa: E501

        self._line_number = line_number

    @property
    def description(self):
        """Gets the description of this LineItem.  # noqa: E501


        :return: The description of this LineItem.  # noqa: E501
        :rtype: object
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LineItem.


        :param description: The description of this LineItem.  # noqa: E501
        :type: object
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def line_type(self):
        """Gets the line_type of this LineItem.  # noqa: E501


        :return: The line_type of this LineItem.  # noqa: E501
        :rtype: LineType
        """
        return self._line_type

    @line_type.setter
    def line_type(self, line_type):
        """Sets the line_type of this LineItem.


        :param line_type: The line_type of this LineItem.  # noqa: E501
        :type: LineType
        """
        if line_type is None:
            raise ValueError("Invalid value for `line_type`, must not be `None`")  # noqa: E501

        self._line_type = line_type

    @property
    def quantity(self):
        """Gets the quantity of this LineItem.  # noqa: E501


        :return: The quantity of this LineItem.  # noqa: E501
        :rtype: object
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this LineItem.


        :param quantity: The quantity of this LineItem.  # noqa: E501
        :type: object
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def fob_id(self):
        """Gets the fob_id of this LineItem.  # noqa: E501

        Used to indicate the FOB point.  Use fobId from the supplier’s Product Pricing and Configuration Service to populate this information  # noqa: E501

        :return: The fob_id of this LineItem.  # noqa: E501
        :rtype: object
        """
        return self._fob_id

    @fob_id.setter
    def fob_id(self, fob_id):
        """Sets the fob_id of this LineItem.

        Used to indicate the FOB point.  Use fobId from the supplier’s Product Pricing and Configuration Service to populate this information  # noqa: E501

        :param fob_id: The fob_id of this LineItem.  # noqa: E501
        :type: object
        """
        if fob_id is None:
            raise ValueError("Invalid value for `fob_id`, must not be `None`")  # noqa: E501

        self._fob_id = fob_id

    @property
    def tolerance_details(self):
        """Gets the tolerance_details of this LineItem.  # noqa: E501


        :return: The tolerance_details of this LineItem.  # noqa: E501
        :rtype: ToleranceDetails
        """
        return self._tolerance_details

    @tolerance_details.setter
    def tolerance_details(self, tolerance_details):
        """Sets the tolerance_details of this LineItem.


        :param tolerance_details: The tolerance_details of this LineItem.  # noqa: E501
        :type: ToleranceDetails
        """
        if tolerance_details is None:
            raise ValueError("Invalid value for `tolerance_details`, must not be `None`")  # noqa: E501

        self._tolerance_details = tolerance_details

    @property
    def allow_partial_shipments(self):
        """Gets the allow_partial_shipments of this LineItem.  # noqa: E501


        :return: The allow_partial_shipments of this LineItem.  # noqa: E501
        :rtype: object
        """
        return self._allow_partial_shipments

    @allow_partial_shipments.setter
    def allow_partial_shipments(self, allow_partial_shipments):
        """Sets the allow_partial_shipments of this LineItem.


        :param allow_partial_shipments: The allow_partial_shipments of this LineItem.  # noqa: E501
        :type: object
        """
        if allow_partial_shipments is None:
            raise ValueError("Invalid value for `allow_partial_shipments`, must not be `None`")  # noqa: E501

        self._allow_partial_shipments = allow_partial_shipments

    @property
    def unit_price(self):
        """Gets the unit_price of this LineItem.  # noqa: E501


        :return: The unit_price of this LineItem.  # noqa: E501
        :rtype: object
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this LineItem.


        :param unit_price: The unit_price of this LineItem.  # noqa: E501
        :type: object
        """
        if unit_price is None:
            raise ValueError("Invalid value for `unit_price`, must not be `None`")  # noqa: E501

        self._unit_price = unit_price

    @property
    def line_item_total(self):
        """Gets the line_item_total of this LineItem.  # noqa: E501


        :return: The line_item_total of this LineItem.  # noqa: E501
        :rtype: object
        """
        return self._line_item_total

    @line_item_total.setter
    def line_item_total(self, line_item_total):
        """Sets the line_item_total of this LineItem.


        :param line_item_total: The line_item_total of this LineItem.  # noqa: E501
        :type: object
        """
        if line_item_total is None:
            raise ValueError("Invalid value for `line_item_total`, must not be `None`")  # noqa: E501

        self._line_item_total = line_item_total

    @property
    def requested_ship_date(self):
        """Gets the requested_ship_date of this LineItem.  # noqa: E501

        The date the line item is requested to ship from the FOB point  # noqa: E501

        :return: The requested_ship_date of this LineItem.  # noqa: E501
        :rtype: object
        """
        return self._requested_ship_date

    @requested_ship_date.setter
    def requested_ship_date(self, requested_ship_date):
        """Sets the requested_ship_date of this LineItem.

        The date the line item is requested to ship from the FOB point  # noqa: E501

        :param requested_ship_date: The requested_ship_date of this LineItem.  # noqa: E501
        :type: object
        """
        if requested_ship_date is None:
            raise ValueError("Invalid value for `requested_ship_date`, must not be `None`")  # noqa: E501

        self._requested_ship_date = requested_ship_date

    @property
    def requested_in_hands_date(self):
        """Gets the requested_in_hands_date of this LineItem.  # noqa: E501

        The date the line item is requested to arrive at the shipping destination  # noqa: E501

        :return: The requested_in_hands_date of this LineItem.  # noqa: E501
        :rtype: object
        """
        return self._requested_in_hands_date

    @requested_in_hands_date.setter
    def requested_in_hands_date(self, requested_in_hands_date):
        """Sets the requested_in_hands_date of this LineItem.

        The date the line item is requested to arrive at the shipping destination  # noqa: E501

        :param requested_in_hands_date: The requested_in_hands_date of this LineItem.  # noqa: E501
        :type: object
        """
        if requested_in_hands_date is None:
            raise ValueError("Invalid value for `requested_in_hands_date`, must not be `None`")  # noqa: E501

        self._requested_in_hands_date = requested_in_hands_date

    @property
    def reference_sales_quote(self):
        """Gets the reference_sales_quote of this LineItem.  # noqa: E501

        The sales quote number associated with this purchase order line (if applicable)  # noqa: E501

        :return: The reference_sales_quote of this LineItem.  # noqa: E501
        :rtype: object
        """
        return self._reference_sales_quote

    @reference_sales_quote.setter
    def reference_sales_quote(self, reference_sales_quote):
        """Sets the reference_sales_quote of this LineItem.

        The sales quote number associated with this purchase order line (if applicable)  # noqa: E501

        :param reference_sales_quote: The reference_sales_quote of this LineItem.  # noqa: E501
        :type: object
        """
        if reference_sales_quote is None:
            raise ValueError("Invalid value for `reference_sales_quote`, must not be `None`")  # noqa: E501

        self._reference_sales_quote = reference_sales_quote

    @property
    def program(self):
        """Gets the program of this LineItem.  # noqa: E501


        :return: The program of this LineItem.  # noqa: E501
        :rtype: object
        """
        return self._program

    @program.setter
    def program(self, program):
        """Sets the program of this LineItem.


        :param program: The program of this LineItem.  # noqa: E501
        :type: object
        """
        if program is None:
            raise ValueError("Invalid value for `program`, must not be `None`")  # noqa: E501

        self._program = program

    @property
    def end_customer_sales_order(self):
        """Gets the end_customer_sales_order of this LineItem.  # noqa: E501

        The distributor’s order number provided to the end customer  # noqa: E501

        :return: The end_customer_sales_order of this LineItem.  # noqa: E501
        :rtype: object
        """
        return self._end_customer_sales_order

    @end_customer_sales_order.setter
    def end_customer_sales_order(self, end_customer_sales_order):
        """Sets the end_customer_sales_order of this LineItem.

        The distributor’s order number provided to the end customer  # noqa: E501

        :param end_customer_sales_order: The end_customer_sales_order of this LineItem.  # noqa: E501
        :type: object
        """
        if end_customer_sales_order is None:
            raise ValueError("Invalid value for `end_customer_sales_order`, must not be `None`")  # noqa: E501

        self._end_customer_sales_order = end_customer_sales_order

    @property
    def product_id(self):
        """Gets the product_id of this LineItem.  # noqa: E501

        The manufacturer’s product id associated with the configuration data  # noqa: E501

        :return: The product_id of this LineItem.  # noqa: E501
        :rtype: object
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this LineItem.

        The manufacturer’s product id associated with the configuration data  # noqa: E501

        :param product_id: The product_id of this LineItem.  # noqa: E501
        :type: object
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")  # noqa: E501

        self._product_id = product_id

    @property
    def customer_product_id(self):
        """Gets the customer_product_id of this LineItem.  # noqa: E501

        The distributor’s product id  # noqa: E501

        :return: The customer_product_id of this LineItem.  # noqa: E501
        :rtype: object
        """
        return self._customer_product_id

    @customer_product_id.setter
    def customer_product_id(self, customer_product_id):
        """Sets the customer_product_id of this LineItem.

        The distributor’s product id  # noqa: E501

        :param customer_product_id: The customer_product_id of this LineItem.  # noqa: E501
        :type: object
        """
        if customer_product_id is None:
            raise ValueError("Invalid value for `customer_product_id`, must not be `None`")  # noqa: E501

        self._customer_product_id = customer_product_id

    @property
    def line_item_grouping_id(self):
        """Gets the line_item_grouping_id of this LineItem.  # noqa: E501

        An identifier that allows configuration data to be spread out among multiple purchase order lines. Keep `lineItemGroupingID` unique when referencing the same product on the purchase order.  Any change to the product, location, decoration, or artwork should produce a unique `lineItemGroupingID` to the purchase order  # noqa: E501

        :return: The line_item_grouping_id of this LineItem.  # noqa: E501
        :rtype: object
        """
        return self._line_item_grouping_id

    @line_item_grouping_id.setter
    def line_item_grouping_id(self, line_item_grouping_id):
        """Sets the line_item_grouping_id of this LineItem.

        An identifier that allows configuration data to be spread out among multiple purchase order lines. Keep `lineItemGroupingID` unique when referencing the same product on the purchase order.  Any change to the product, location, decoration, or artwork should produce a unique `lineItemGroupingID` to the purchase order  # noqa: E501

        :param line_item_grouping_id: The line_item_grouping_id of this LineItem.  # noqa: E501
        :type: object
        """
        if line_item_grouping_id is None:
            raise ValueError("Invalid value for `line_item_grouping_id`, must not be `None`")  # noqa: E501

        self._line_item_grouping_id = line_item_grouping_id

    @property
    def part_array(self):
        """Gets the part_array of this LineItem.  # noqa: E501


        :return: The part_array of this LineItem.  # noqa: E501
        :rtype: object
        """
        return self._part_array

    @part_array.setter
    def part_array(self, part_array):
        """Sets the part_array of this LineItem.


        :param part_array: The part_array of this LineItem.  # noqa: E501
        :type: object
        """
        if part_array is None:
            raise ValueError("Invalid value for `part_array`, must not be `None`")  # noqa: E501

        self._part_array = part_array

    @property
    def configuration(self):
        """Gets the configuration of this LineItem.  # noqa: E501


        :return: The configuration of this LineItem.  # noqa: E501
        :rtype: object
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this LineItem.


        :param configuration: The configuration of this LineItem.  # noqa: E501
        :type: object
        """
        if configuration is None:
            raise ValueError("Invalid value for `configuration`, must not be `None`")  # noqa: E501

        self._configuration = configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LineItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LineItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
